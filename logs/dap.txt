!! ⚠️ PLEASE REVIEW THIS LOG FOR SENSITIVE INFORMATION BEFORE SHARING ⚠️ !!
Dart Code extension: 3.78.2
Flutter extension: 3.79.20231130 (not activated)

App: Visual Studio Code
App Host: desktop
Version: win 1.85.0


Logging Categories:
    DAP

Wed Dec 13 2023 [08:31:21 GMT+0700 (Indochina Time)] Log file started
[8:45:52 AM] [DAP] [Info] Starting debug session 2c57e826-2048-497d-9c9a-8720a27bdaba
[8:45:52 AM] [DAP] [Info] ==> {"command":"initialize","arguments":{"clientID":"vscode","clientName":"Visual Studio Code","adapterID":"dart","pathFormat":"path","linesStartAt1":true,"columnsStartAt1":true,"supportsVariableType":true,"supportsVariablePaging":true,"supportsRunInTerminalRequest":true,"locale":"en","supportsProgressReporting":true,"supportsInvalidatedEvent":true,"supportsMemoryReferences":true,"supportsArgsCanBeInterpretedByShell":true,"supportsMemoryEvent":true,"supportsStartDebuggingRequest":true},"type":"request","seq":1}
[8:45:53 AM] [DAP] [Info] <== {"seq":1,"type":"response","body":{"exceptionBreakpointFilters":[{"default":false,"filter":"All","label":"All Exceptions"},{"default":true,"filter":"Unhandled","label":"Uncaught Exceptions"}],"supportsClipboardContext":true,"supportsConditionalBreakpoints":true,"supportsConfigurationDoneRequest":true,"supportsDelayedStackTraceLoading":true,"supportsEvaluateForHovers":true,"supportsLogPoints":true,"supportsRestartRequest":false,"supportsTerminateRequest":true,"supportsValueFormattingOptions":true},"command":"initialize","request_seq":1,"success":true}
[8:45:53 AM] [DAP] [Info] <== {"seq":2,"type":"event","body":{},"event":"initialized"}
[8:45:53 AM] [DAP] [Info] ==> {"command":"launch","arguments":{"name":"Dart  (Pixel_3a_API_34_extension_level_7_x86_64)","noDebug":false,"request":"launch","type":"dart","program":"D:\\Flutter\\tintuc\\lib\\main.dart","dartCodeDebugSessionID":"session-4e9e4","projectRootPath":"D:\\Flutter\\tintuc","cwd":"D:\\Flutter\\tintuc","deviceId":"emulator-5554","deviceName":"Pixel_3a_API_34_extension_level_7_x86_64 (android-x64)","toolEnv":{"FLUTTER_HOST":"VSCode","PUB_ENVIRONMENT":"vscode.dart-code","FLUTTER_ROOT":"C:\\src\\flutter"},"sendLogsToClient":false,"sendCustomProgressEvents":true,"allowAnsiColorOutput":true,"additionalProjectPaths":["D:\\Flutter\\tintuc"],"args":[],"vmAdditionalArgs":[],"toolArgs":["-d","emulator-5554","--devtools-server-address","http://127.0.0.1:9100/"],"vmServicePort":0,"dartSdkPath":"C:\\src\\flutter\\bin\\cache\\dart-sdk","vmServiceLogFile":"D:\\Flutter\\tintuc\\logs\\observatory.txt","maxLogLineLength":2000,"dartTestLogFile":"D:\\Flutter\\tintuc\\logs\\dart_test.txt","debugSdkLibraries":true,"debugExternalPackageLibraries":true,"showDartDeveloperLogs":true,"evaluateGettersInDebugViews":true,"showGettersInDebugViews":true,"evaluateToStringInDebugViews":true,"flutterSdkPath":"C:\\src\\flutter","useInspectorNotificationsForWidgetErrors":true,"flutterRunLogFile":"D:\\Flutter\\tintuc\\logs\\flutter_run.txt","flutterTestLogFile":"D:\\Flutter\\tintuc\\logs\\flutter_test.txt","showMemoryUsage":false,"debuggerType":2,"__sessionId":"2c57e826-2048-497d-9c9a-8720a27bdaba"},"type":"request","seq":2}
[8:45:53 AM] [DAP] [Info] ==> {"command":"setExceptionBreakpoints","arguments":{"filters":["All","Unhandled"]},"type":"request","seq":3}
[8:45:53 AM] [DAP] [Info] <== {"seq":3,"type":"response","body":{},"command":"setExceptionBreakpoints","request_seq":3,"success":true}
[8:45:53 AM] [DAP] [Info] ==> {"command":"configurationDone","type":"request","seq":4}
[8:45:53 AM] [DAP] [Info] <== {"seq":4,"type":"response","command":"configurationDone","request_seq":4,"success":true}
[8:45:53 AM] [DAP] [Info] ==> {"command":"threads","type":"request","seq":5}
[8:45:53 AM] [DAP] [Info] <== {"seq":5,"type":"event","body":{"message":"Launching…","progressId":"launch_1","title":"Flutter"},"event":"dart.progressStart"}
[8:45:53 AM] [DAP] [Info] <== {"seq":6,"type":"response","command":"launch","request_seq":2,"success":true}
[8:45:53 AM] [DAP] [Info] <== {"seq":7,"type":"response","body":{"threads":[]},"command":"threads","request_seq":5,"success":true}
[8:45:54 AM] [DAP] [Info] <== {"seq":8,"type":"event","body":{"capabilities":{"supportsRestartRequest":true}},"event":"capabilities"}
[8:45:54 AM] [DAP] [Info] <== {"seq":9,"type":"event","body":{"appId":"17a81149-f0b4-46f2-85b5-437b2137da7d","deviceId":"emulator-5554","directory":"D:\\Flutter\\tintuc","supportsRestart":true,"launchMode":"run","mode":"debug"},"event":"flutter.appStart"}
[8:45:54 AM] [DAP] [Info] <== {"seq":10,"type":"event","body":{"category":"console","output":"Launching lib\\main.dart on sdk gphone64 x86 64 in debug mode...\n"},"event":"output"}
[8:45:55 AM] [DAP] [Info] <== {"seq":11,"type":"event","body":{"category":"console","output":"Building with Flutter multidex support enabled.\n"},"event":"output"}
[8:46:29 AM] [DAP] [Info] <== {"seq":12,"type":"event","body":{"category":"console","output":"√  Built build\\app\\outputs\\flutter-apk\\app-debug.apk.\n"},"event":"output"}
[8:46:35 AM] [DAP] [Info] <== {"seq":13,"type":"event","body":{"progressId":"launch_1"},"event":"dart.progressEnd"}
[8:46:35 AM] [DAP] [Info] <== {"seq":14,"type":"event","body":{"output":"Connecting to VM Service at ws://127.0.0.1:53363/V8WO2g36KlE=/ws\n"},"event":"output"}
[8:46:35 AM] [DAP] [Info] <== {"seq":15,"type":"event","body":{"vmServiceUri":"ws://127.0.0.1:53363/V8WO2g36KlE=/ws"},"event":"dart.debuggerUris"}
[8:46:35 AM] [DAP] [Info] <== {"seq":16,"type":"event","body":{"reason":"started","threadId":1},"event":"thread"}
[8:46:36 AM] [DAP] [Info] ==> {"command":"threads","type":"request","seq":6}
[8:46:36 AM] [DAP] [Info] <== {"seq":17,"type":"response","body":{"threads":[{"id":1,"name":"main"}]},"command":"threads","request_seq":6,"success":true}
[8:46:36 AM] [DAP] [Info] <== {"seq":18,"type":"event","body":{},"event":"flutter.appStarted"}
[8:46:36 AM] [DAP] [Info] <== {"seq":19,"type":"event","body":{"service":"reloadSources","method":"s0.reloadSources"},"event":"dart.serviceRegistered"}
[8:46:36 AM] [DAP] [Info] <== {"seq":20,"type":"event","body":{"service":"hotRestart","method":"s0.hotRestart"},"event":"dart.serviceRegistered"}
[8:46:36 AM] [DAP] [Info] <== {"seq":21,"type":"event","body":{"service":"flutterVersion","method":"s0.flutterVersion"},"event":"dart.serviceRegistered"}
[8:46:36 AM] [DAP] [Info] <== {"seq":22,"type":"event","body":{"service":"compileExpression","method":"s0.compileExpression"},"event":"dart.serviceRegistered"}
[8:46:36 AM] [DAP] [Info] <== {"seq":23,"type":"event","body":{"service":"flutterMemoryInfo","method":"s0.flutterMemoryInfo"},"event":"dart.serviceRegistered"}
[8:46:36 AM] [DAP] [Info] <== {"seq":24,"type":"event","body":{"service":"flutterGetSkSL","method":"s0.flutterGetSkSL"},"event":"dart.serviceRegistered"}
[8:46:36 AM] [DAP] [Info] <== {"seq":25,"type":"event","body":{"service":"launchDevTools","method":"s2.launchDevTools"},"event":"dart.serviceRegistered"}
[8:46:36 AM] [DAP] [Info] <== {"seq":26,"type":"event","body":{"extensionRPC":"ext.flutter.reassemble","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":27,"type":"event","body":{"extensionRPC":"ext.flutter.exit","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":28,"type":"event","body":{"extensionRPC":"ext.flutter.connectedVmServiceUri","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":29,"type":"event","body":{"extensionRPC":"ext.flutter.activeDevToolsServerAddress","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":30,"type":"event","body":{"extensionRPC":"ext.flutter.platformOverride","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":31,"type":"event","body":{"extensionRPC":"ext.flutter.brightnessOverride","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":32,"type":"event","body":{"extensionRPC":"ext.flutter.timeDilation","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":33,"type":"event","body":{"extensionRPC":"ext.flutter.evict","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":34,"type":"event","body":{"extensionRPC":"ext.flutter.invertOversizedImages","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":35,"type":"event","body":{"extensionRPC":"ext.flutter.debugPaint","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":36,"type":"event","body":{"extensionRPC":"ext.flutter.debugPaintBaselinesEnabled","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":37,"type":"event","body":{"extensionRPC":"ext.flutter.repaintRainbow","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":38,"type":"event","body":{"extensionRPC":"ext.flutter.debugDumpLayerTree","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":39,"type":"event","body":{"extensionRPC":"ext.flutter.debugDisableClipLayers","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":40,"type":"event","body":{"extensionRPC":"ext.flutter.debugDisablePhysicalShapeLayers","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":41,"type":"event","body":{"extensionRPC":"ext.flutter.debugDisableOpacityLayers","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":42,"type":"event","body":{"extensionRPC":"ext.flutter.debugDumpRenderTree","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":43,"type":"event","body":{"extensionRPC":"ext.flutter.debugDumpSemanticsTreeInTraversalOrder","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":44,"type":"event","body":{"extensionRPC":"ext.flutter.debugDumpSemanticsTreeInInverseHitTestOrder","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":45,"type":"event","body":{"extensionRPC":"ext.flutter.profileRenderObjectPaints","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":46,"type":"event","body":{"extensionRPC":"ext.flutter.profileRenderObjectLayouts","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":47,"type":"event","body":{"extensionRPC":"ext.flutter.debugDumpApp","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":48,"type":"event","body":{"extensionRPC":"ext.flutter.debugDumpFocusTree","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":49,"type":"event","body":{"extensionRPC":"ext.flutter.showPerformanceOverlay","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":50,"type":"event","body":{"extensionRPC":"ext.flutter.didSendFirstFrameEvent","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":51,"type":"event","body":{"extensionRPC":"ext.flutter.didSendFirstFrameRasterizedEvent","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":52,"type":"event","body":{"extensionRPC":"ext.flutter.profileWidgetBuilds","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":53,"type":"event","body":{"extensionRPC":"ext.flutter.profileUserWidgetBuilds","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":54,"type":"event","body":{"extensionRPC":"ext.flutter.debugAllowBanner","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":55,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.structuredErrors","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":56,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.show","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":57,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.trackRebuildDirtyWidgets","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":58,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.trackRepaintWidgets","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":59,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.disposeAllGroups","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":60,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.disposeGroup","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":61,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.isWidgetTreeReady","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":62,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.disposeId","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":63,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.setPubRootDirectories","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":64,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.addPubRootDirectories","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":65,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.removePubRootDirectories","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":66,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getPubRootDirectories","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":67,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.setSelectionById","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":68,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getParentChain","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":69,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getProperties","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":70,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getChildren","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":71,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getChildrenSummaryTree","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":72,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getChildrenDetailsSubtree","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":73,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getRootWidget","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":74,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getRootWidgetSummaryTree","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":75,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getRootWidgetSummaryTreeWithPreviews","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":76,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getDetailsSubtree","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":77,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getSelectedWidget","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":78,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getSelectedSummaryWidget","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":79,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.isWidgetCreationTracked","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":80,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.screenshot","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":81,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getLayoutExplorerNode","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":82,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.setFlexFit","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":83,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.setFlexFactor","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":84,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.setFlexProperties","isolateId":"isolates/4884795506685975"},"event":"dart.serviceExtensionAdded"}
[8:46:36 AM] [DAP] [Info] <== {"seq":85,"type":"event","body":{"extension":"ext.flutter.activeDevToolsServerAddress","value":"http://127.0.0.1:9100"},"event":"flutter.serviceExtensionStateChanged"}
[8:46:36 AM] [DAP] [Info] <== {"seq":86,"type":"event","body":{"extension":"ext.flutter.connectedVmServiceUri","value":"http://127.0.0.1:53363/V8WO2g36KlE=/"},"event":"flutter.serviceExtensionStateChanged"}
[8:46:36 AM] [DAP] [Info] <== {"seq":87,"type":"event","body":{"category":"stdout","output":"D/CompatibilityChangeReporter( 6661): Compat change id reported: 183155436; UID 10200; state: ENABLED\n"},"event":"output"}
[8:46:36 AM] [DAP] [Info] <== {"seq":88,"type":"event","body":{"category":"stdout","output":"D/SessionsDependencies( 6661): Dependency to CRASHLYTICS added.\n"},"event":"output"}
[8:46:36 AM] [DAP] [Info] ==> {"command":"callService","arguments":{"method":"ext.flutter.inspector.setPubRootDirectories","params":{"isolateId":"isolates/4884795506685975","arg0":"file:///D:/Flutter/tintuc"}},"type":"request","seq":7}
[8:46:36 AM] [DAP] [Info] <== {"seq":89,"type":"event","body":{"category":"stdout","output":"I/FirebaseApp( 6661): Device unlocked: initializing all Firebase APIs for app [DEFAULT]\n"},"event":"output"}
[8:46:36 AM] [DAP] [Info] <== {"seq":90,"type":"response","body":{"result":null,"type":"_extensionType","method":"ext.flutter.inspector.setPubRootDirectories"},"command":"callService","request_seq":7,"success":true}
[8:46:36 AM] [DAP] [Info] <== {"seq":91,"type":"event","body":{"category":"stdout","output":"I/FirebaseCrashlytics( 6661): Initializing Firebase Crashlytics 18.6.0 for com.example.tintuc\n"},"event":"output"}
[8:46:36 AM] [DAP] [Info] <== {"seq":92,"type":"event","body":{"category":"stdout","output":"D/SessionsDependencies( 6661): Subscriber CRASHLYTICS registered.\n"},"event":"output"}
[8:46:36 AM] [DAP] [Info] <== {"seq":93,"type":"event","body":{"category":"stdout","output":"D/CompatibilityChangeReporter( 6661): Compat change id reported: 3400644; UID 10200; state: DISABLED\n"},"event":"output"}
[8:46:36 AM] [DAP] [Info] <== {"seq":94,"type":"event","body":{"category":"stdout","output":"D/TrafficStats( 6661): tagSocket(122) with statsTag=0xffffffff, statsUid=-1\n"},"event":"output"}
[8:46:37 AM] [DAP] [Info] <== {"seq":95,"type":"event","body":{"category":"stdout","output":"W/Glide   ( 6661): Failed to find GeneratedAppGlideModule. You should include an annotationProcessor compile dependency on com.github.bumptech.glide:compiler in your application and a @GlideModule annotated AppGlideModule implementation or LibraryGlideModules will be silently ignored\n"},"event":"output"}
[8:46:37 AM] [DAP] [Info] <== {"seq":96,"type":"event","body":{"category":"stdout","output":"I/FIAM.Headless( 6661): Starting InAppMessaging runtime with Installation ID d5wxAGoRRdqy6Mk2sEpplS\n"},"event":"output"}
[8:46:37 AM] [DAP] [Info] <== {"seq":97,"type":"event","body":{"category":"stdout","output":"D/FirebaseSessions( 6661): Initializing Firebase Sessions SDK.\n"},"event":"output"}
[8:46:37 AM] [DAP] [Info] <== {"seq":98,"type":"event","body":{"category":"stdout","output":"D/CompatibilityChangeReporter( 6661): Compat change id reported: 247079863; UID 10200; state: DISABLED\n"},"event":"output"}
[8:46:37 AM] [DAP] [Info] <== {"seq":99,"type":"event","body":{"category":"stdout","output":"D/SessionConfigFetcher( 6661): Fetching settings from server.\n"},"event":"output"}
[8:46:37 AM] [DAP] [Info] <== {"seq":100,"type":"event","body":{"category":"stdout","output":"D/TrafficStats( 6661): tagSocket(127) with statsTag=0xffffffff, statsUid=-1\n"},"event":"output"}
[8:46:37 AM] [DAP] [Info] <== {"seq":101,"type":"event","body":{"extension":"ext.flutter.inspector.structuredErrors","value":true},"event":"flutter.serviceExtensionStateChanged"}
[8:46:37 AM] [DAP] [Info] <== {"seq":102,"type":"event","body":{"category":"stdout","output":"I/FirebaseCrashlytics( 6661): No version control information found\n"},"event":"output"}
[8:46:37 AM] [DAP] [Info] <== {"seq":103,"type":"event","body":{"category":"stdout","output":"D/FRCPlugin( 6661): Sending fetchTimeout: 60\n"},"event":"output"}
[8:46:37 AM] [DAP] [Info] <== {"seq":104,"type":"event","body":{"category":"stdout","output":"D/SessionConfigFetcher( 6661): Fetched settings: {\"settings_version\":3,\"cache_duration\":86400,\"features\":{\"collect_logged_exceptions\":true,\"collect_reports\":true,\"collect_analytics\":false,\"prompt_enabled\":false,\"push_enabled\":false,\"firebase_crashlytics_enabled\":false,\"collect_anrs\":true,\"collect_metric_kit\":false,\"collect_build_ids\":true},\"app\":{\"status\":\"activated\",\"update_required\":false,\"report_upload_variant\":2,\"native_report_upload_variant\":2},\"fabric\":{\"org_id\":\"656efe957fd23a7f749c36a5\",\"bundle_id\":\"com.example.tintuc\"},\"on_demand_upload_rate_per_minute\":10,\"on_demand_backoff_base\":1.2,\"on_demand_backoff_step_duration_seconds\":60,\"app_quality\":{\"sessions_enabled\":true,\"sampling_rate\":1,\"session_timeout_seconds\":1800}}\n"},"event":"output"}
[8:46:37 AM] [DAP] [Info] <== {"seq":105,"type":"event","body":{"category":"stdout","output":"D/LifecycleServiceBinder( 6661): Binding service to application.\n"},"event":"output"}
[8:46:38 AM] [DAP] [Info] <== {"seq":106,"type":"event","body":{"category":"stdout","output":"D/SessionLifecycleService( 6661): Service bound to new client on process 6661\n"},"event":"output"}
[8:46:38 AM] [DAP] [Info] <== {"seq":107,"type":"event","body":{"category":"stdout","output":"D/SessionLifecycleClient( 6661): Connected to SessionLifecycleService. Queue size 0\n"},"event":"output"}
[8:46:38 AM] [DAP] [Info] <== {"seq":108,"type":"event","body":{"category":"stdout","output":"D/SessionLifecycleService( 6661): App has not yet foregrounded. Using previously stored session: null\n"},"event":"output"}
[8:46:38 AM] [DAP] [Info] <== {"seq":109,"type":"event","body":{"category":"stdout","output":"D/SessionLifecycleService( 6661): Client android.os.Messenger@c100c29 bound at 942126. Clients: 1\n"},"event":"output"}
[8:46:39 AM] [DAP] [Info] <== {"seq":110,"type":"event","body":{"category":"stdout","output":"I/ExoPlayerImpl( 6661): Init 1b3bd4f [ExoPlayerLib/2.18.7] [emu64xa, sdk_gphone64_x86_64, Google, 34]\n"},"event":"output"}
[8:46:39 AM] [DAP] [Info] <== {"seq":111,"type":"event","body":{"category":"stdout","output":"W/.example.tintuc( 6661): Accessing hidden method Landroid/media/AudioTrack;->getLatency()I (unsupported, reflection, allowed)\n"},"event":"output"}
[8:46:39 AM] [DAP] [Info] <== {"seq":112,"type":"event","body":{"category":"stdout","output":"I/Surface ( 6661): Surface::setFrameRate is deprecated, setFrameRate hint is dropped as destination is not SurfaceFlinger\n"},"event":"output"}
[8:46:39 AM] [DAP] [Info] <== {"seq":113,"type":"event","body":{"category":"stdout","output":"D/TrafficStats( 6661): tagSocket(144) with statsTag=0xffffffff, statsUid=-1\n"},"event":"output"}
[8:46:39 AM] [DAP] [Info] <== {"seq":114,"type":"event","body":{"category":"stdout","output":"W/DynamiteModule( 6661): Local module descriptor class for com.google.android.gms.providerinstaller.dynamite not found.\n"},"event":"output"}
[8:46:39 AM] [DAP] [Info] <== {"seq":115,"type":"event","body":{"category":"stdout","output":"I/DynamiteModule( 6661): Considering local module com.google.android.gms.providerinstaller.dynamite:0 and remote module com.google.android.gms.providerinstaller.dynamite:0\n"},"event":"output"}
[8:46:39 AM] [DAP] [Info] <== {"seq":116,"type":"event","body":{"category":"stdout","output":"W/ProviderInstaller( 6661): Failed to load providerinstaller module: No acceptable module com.google.android.gms.providerinstaller.dynamite found. Local version is 0 and remote version is 0.\n"},"event":"output"}
[8:46:39 AM] [DAP] [Info] <== {"seq":117,"type":"event","body":{"category":"stdout","output":"D/nativeloader( 6661): Configuring clns-7 for other apk /system/framework/org.apache.http.legacy.jar. target_sdk_version=33, uses_libraries=ALL, library_path=/product/priv-app/PrebuiltGmsCore/lib/x86_64:/product/priv-app/PrebuiltGmsCore/PrebuiltGmsCore.apk!/lib/x86_64, permitted_path=/data:/mnt/expand:/data/user/0/com.google.android.gms\n"},"event":"output"}
[8:46:39 AM] [DAP] [Info] <== {"seq":118,"type":"event","body":{"category":"stdout","output":"D/nativeloader( 6661): Configuring clns-8 for other apk /system/framework/com.android.media.remotedisplay.jar. target_sdk_version=33, uses_libraries=ALL, library_path=/product/priv-app/PrebuiltGmsCore/lib/x86_64:/product/priv-app/PrebuiltGmsCore/PrebuiltGmsCore.apk!/lib/x86_64, permitted_path=/data:/mnt/expand:/data/user/0/com.google.android.gms\n"},"event":"output"}
[8:46:39 AM] [DAP] [Info] <== {"seq":119,"type":"event","body":{"category":"stdout","output":"D/nativeloader( 6661): Configuring clns-9 for other apk /system/framework/com.android.location.provider.jar. target_sdk_version=33, uses_libraries=ALL, library_path=/product/priv-app/PrebuiltGmsCore/lib/x86_64:/product/priv-app/PrebuiltGmsCore/PrebuiltGmsCore.apk!/lib/x86_64, permitted_path=/data:/mnt/expand:/data/user/0/com.google.android.gms\n"},"event":"output"}
[8:46:39 AM] [DAP] [Info] <== {"seq":120,"type":"event","body":{"category":"stdout","output":"D/ApplicationLoaders( 6661): Returning zygote-cached class loader: /system_ext/framework/androidx.window.extensions.jar\n"},"event":"output"}
[8:46:39 AM] [DAP] [Info] <== {"seq":121,"type":"event","body":{"category":"stdout","output":"D/ApplicationLoaders( 6661): Returning zygote-cached class loader: /system_ext/framework/androidx.window.sidecar.jar\n"},"event":"output"}
[8:46:39 AM] [DAP] [Info] <== {"seq":122,"type":"event","body":{"category":"stdout","output":"D/nativeloader( 6661): InitLlndkLibrariesProduct: libEGL.so:libGLESv1_CM.so:libGLESv2.so:libGLESv3.so:libRS.so:libandroid_net.so:libbinder_ndk.so:libc.so:libcgrouprc.so:libclang_rt.asan-x86_64-android.so:libcom.android.tethering.connectivity_native.so:libdl.so:libft2.so:liblog.so:libm.so:libmediandk.so:libnativewindow.so:libneuralnetworks.so:libselinux.so:libsync.so:libvndksupport.so:libvulkan.so\n"},"event":"output"}
[8:46:39 AM] [DAP] [Info] <== {"seq":123,"type":"event","body":{"category":"stdout","output":"D/nativeloader( 6661): Configuring product-clns-10 for unbundled product apk /product/priv-app/PrebuiltGmsCore/PrebuiltGmsCore.apk. target_sdk_version=33, uses_libraries=, library_path=/product/priv-app/PrebuiltGmsCore/lib/x86_64:/product/priv-app/PrebuiltGmsCore/PrebuiltGmsCore.apk!/lib/x86_64:/product/lib64:/system/product/lib64, permitted_path=/data:/mnt/expand:/data/user/0/com.google.android.gms:/product/lib64:/system/product/lib64\n"},"event":"output"}
[8:46:39 AM] [DAP] [Info] <== {"seq":124,"type":"event","body":{"category":"stdout","output":"D/nativeloader( 6661): InitVndkspLibrariesProduct: android.hardware.common-V2-ndk.so:android.hardware.common.fmq-V1-ndk.so:android.hardware.graphics.allocator-V2-ndk.so:android.hardware.graphics.common-V4-ndk.so:android.hardware.graphics.common@1.0.so:android.hardware.graphics.common@1.1.so:android.hardware.graphics.common@1.2.so:android.hardware.graphics.composer3-V1-ndk.so:android.hardware.graphics.mapper@2.0.so:android.hardware.graphics.mapper@2.1.so:android.hardware.graphics.mapper@3.0.so:android.hardware.graphics.mapper@4.0.so:android.hardware.renderscript@1.0.so:android.hidl.memory.token@1.0.so:android.hidl.memory@1.0-impl.so:android.hidl.memory@1.0.so:android.hidl.safe_union@1.0.so:libRSCpuRef.so:libRSDriver.so:libRS_internal.so:libbase.so:libbcinfo.so:libblas.so:libc++.so:libcompiler_rt.so:libcutils.so:libdmabufheap.so:libgralloctypes.so:libhardware.so:libhidlbase.so:libhidlmemory.so:libion.so:libjsoncpp.so:liblzma.so:libprocessgroup.so:libunwindstack.so:libutils.so:libutilscallstack.so:libz.so\n"},"event":"output"}
[8:46:39 AM] [DAP] [Info] <== {"seq":125,"type":"event","body":{"category":"stdout","output":"V/NativeCrypto( 6661): Registering com/google/android/gms/org/conscrypt/NativeCrypto's 295 native methods...\n"},"event":"output"}
[8:46:39 AM] [DAP] [Info] <== {"seq":126,"type":"event","body":{"category":"stdout","output":"W/.example.tintuc( 6661): Accessing hidden method Ljava/security/spec/ECParameterSpec;->getCurveName()Ljava/lang/String; (unsupported, reflection, allowed)\n"},"event":"output"}
[8:46:39 AM] [DAP] [Info] <== {"seq":127,"type":"event","body":{"category":"stdout","output":"I/ProviderInstaller( 6661): Installed default security provider GmsCore_OpenSSL\n"},"event":"output"}
[8:46:40 AM] [DAP] [Info] <== {"seq":128,"type":"event","body":{"category":"stdout","output":"D/ProfileInstaller( 6661): Installing profile for com.example.tintuc\n"},"event":"output"}
[8:46:40 AM] [DAP] [Info] <== {"seq":129,"type":"event","body":{"reason":"exception","text":"SocketException (SocketException: Failed host lookup: '64fc7845605a026163ae88c0.mockapi.io' (OS Error: No address associated with hostname, errno = 7))","threadId":1},"event":"stopped"}
[8:46:40 AM] [DAP] [Info] ==> {"command":"threads","type":"request","seq":8}
[8:46:40 AM] [DAP] [Info] <== {"seq":130,"type":"response","body":{"threads":[{"id":1,"name":"main"}]},"command":"threads","request_seq":8,"success":true}
[8:46:40 AM] [DAP] [Info] ==> {"command":"stackTrace","arguments":{"threadId":1,"startFrame":0,"levels":1},"type":"request","seq":9}
[8:46:40 AM] [DAP] [Info] <== {"seq":131,"type":"event","body":{"category":"stdout","output":"D/TrafficStats( 6661): tagSocket(161) with statsTag=0xffffffff, statsUid=-1\n"},"event":"output"}
[8:46:40 AM] [DAP] [Info] <== {"seq":132,"type":"response","body":{"stackFrames":[{"canRestart":false,"column":9,"id":2,"line":520,"name":"_NativeSocket.lookup.<anonymous closure>","source":{"adapterData":{"type":"@Script","id":"libraries/@13069316/scripts/dart%3Aio-patch%2Fsocket_patch.dart/0","fixedId":true,"uri":"dart:io-patch/socket_patch.dart"},"name":"dart:io-patch/socket_patch.dart","origin":"from the SDK","path":"C:\\src\\flutter\\bin\\cache\\pkg\\sky_engine\\lib\\_internal\\vm\\bin\\socket_patch.dart","sourceReference":3}}],"totalFrames":21},"command":"stackTrace","request_seq":9,"success":true}
[8:46:40 AM] [DAP] [Info] ==> {"command":"source","arguments":{"sourceReference":3,"source":{"adapterData":{"type":"@Script","id":"libraries/@13069316/scripts/dart%3Aio-patch%2Fsocket_patch.dart/0","fixedId":true,"uri":"dart:io-patch/socket_patch.dart"},"name":"dart:io-patch/socket_patch.dart","origin":"from the SDK","path":"C:\\src\\flutter\\bin\\cache\\pkg\\sky_engine\\lib\\_internal\\vm\\bin\\socket_patch.dart","sourceReference":3}},"type":"request","seq":10}
[8:46:40 AM] [DAP] [Info] <== {"seq":133,"type":"event","body":{"category":"stdout","output":"W/.example.tintuc( 6661): Accessing hidden field Ljava/net/Socket;->impl:Ljava/net/SocketImpl; (unsupported, reflection, allowed)\n"},"event":"output"}
[8:46:40 AM] [DAP] [Info] <== {"seq":134,"type":"response","body":{"content":"// Copyright (c) 2013, the Dart project authors.  Please see the AUTHORS file\n// for details. All rights reserved. Use of this source code is governed by a\n// BSD-style license that can be found in the LICENSE file.\n\npart of \"common_patch.dart\";\n\n@patch\nclass RawServerSocket {\n  @patch\n  static Future<RawServerSocket> bind(address, int port,\n      {int backlog = 0, bool v6Only = false, bool shared = false}) {\n    return _RawServerSocket.bind(address, port, backlog, v6Only, shared);\n  }\n}\n\n@patch\nclass RawSocket {\n  @patch\n  static Future<RawSocket> connect(dynamic host, int port,\n      {dynamic sourceAddress, int sourcePort = 0, Duration? timeout}) {\n    return _RawSocket.connect(host, port, sourceAddress, sourcePort, timeout);\n  }\n\n  @patch\n  static Future<ConnectionTask<RawSocket>> startConnect(dynamic host, int port,\n      {dynamic sourceAddress, int sourcePort = 0}) {\n    return _RawSocket.startConnect(host, port, sourceAddress, sourcePort);\n  }\n}\n\n@patch\nclass RawSocketOption {\n  static final List<int?> _optionsCache =\n      List<int?>.filled(_RawSocketOptions.values.length, null);\n\n  @patch\n  static int _getOptionValue(int key) {\n    if (key > _RawSocketOptions.values.length) {\n      throw ArgumentError.value(key, 'key');\n    }\n    return _optionsCache[key] ??= _getNativeOptionValue(key);\n  }\n\n  @pragma(\"vm:external-name\", \"RawSocketOption_GetOptionValue\")\n  external static int _getNativeOptionValue(int key);\n}\n\n@patch\nclass InternetAddress {\n  @patch\n  static InternetAddress get loopbackIPv4 {\n    return _InternetAddress.loopbackIPv4;\n  }\n\n  @patch\n  static InternetAddress get loopbackIPv6 {\n    return _InternetAddress.loopbackIPv6;\n  }\n\n  @patch\n  static InternetAddress get anyIPv4 {\n    return _InternetAddress.anyIPv4;\n  }\n\n  @patch\n  static InternetAddress get anyIPv6 {\n    return _InternetAddress.anyIPv6;\n  }\n\n  @patch\n  factory …
[8:46:40 AM] [DAP] [Info] <== {"seq":135,"type":"event","body":{"category":"stdout","output":"W/.example.tintuc( 6661): Accessing hidden method Ljava/security/spec/ECParameterSpec;->setCurveName(Ljava/lang/String;)V (unsupported, reflection, allowed)\n"},"event":"output"}
[8:46:40 AM] [DAP] [Info] ==> {"command":"stackTrace","arguments":{"threadId":1,"startFrame":1,"levels":19},"type":"request","seq":11}
[8:46:40 AM] [DAP] [Info] <== {"seq":136,"type":"event","body":{"category":"stdout","output":"D/TrafficStats( 6661): tagSocket(144) with statsTag=0xffffffff, statsUid=-1\n"},"event":"output"}
[8:46:40 AM] [DAP] [Info] <== {"seq":137,"type":"response","body":{"stackFrames":[{"column":0,"id":4,"line":0,"name":"<asynchronous gap>","presentationHint":"label"},{"canRestart":false,"column":29,"id":5,"line":633,"name":"_NativeSocket.staggeredLookup.<anonymous closure>.lookupAddresses","source":{"adapterData":{"type":"@Script","id":"libraries/@13069316/scripts/dart%3Aio-patch%2Fsocket_patch.dart/0","fixedId":true,"uri":"dart:io-patch/socket_patch.dart"},"name":"dart:io-patch/socket_patch.dart","origin":"from the SDK","path":"C:\\src\\flutter\\bin\\cache\\pkg\\sky_engine\\lib\\_internal\\vm\\bin\\socket_patch.dart","sourceReference":7}},{"column":0,"id":6,"line":0,"name":"<asynchronous gap>","presentationHint":"label"}],"totalFrames":4},"command":"stackTrace","request_seq":11,"success":true}
[8:46:42 AM] [DAP] [Info] <== {"seq":138,"type":"event","body":{"category":"stdout","output":"I/DMCodecAdapterFactory( 6661): Creating an asynchronous MediaCodec adapter for track type video\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":139,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): allocate(c2.goldfish.h264.decoder)\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":140,"type":"event","body":{"category":"stdout","output":"I/Codec2Client( 6661): Available Codec2 services: \"default\" \"software\"\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":141,"type":"event","body":{"category":"stdout","output":"I/CCodec  ( 6661): setting up 'default' as default (vendor) store\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":142,"type":"event","body":{"category":"stdout","output":"I/CCodec  ( 6661): Created component [c2.goldfish.h264.decoder]\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":143,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): read media type: video/avc\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":144,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: algo.buffers.max-count.values\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":145,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: output.subscribed-indices.values\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":146,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: input.buffers.allocator-ids.values\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":147,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: output.buffers.allocator-ids.values\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":148,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: algo.buffers.allocator-ids.values\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":149,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: output.buffers.pool-ids.values\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":150,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: algo.buffers.pool-ids.values\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":151,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): ignored struct field coded.color-format.locations\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":152,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): ignoring local param raw.size (0xd2001800) as it is already supported\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":153,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): ignoring local param default.color (0x5200180b) as it is already supported\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":154,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): ignored struct field raw.hdr-static-info.mastering\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":155,"type":"event","body":{"category":"stdout","output":"I/CCodecConfig( 6661): query failed after returning 12 values (BAD_INDEX)\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":156,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): c2 config diff is Dict {\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":157,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.pl.level = 20496\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":158,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.pl.profile = 20481\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":159,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.vui.color.matrix = 0\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":160,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.vui.color.primaries = 0\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":161,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.vui.color.range = 2\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":162,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.vui.color.transfer = 0\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":163,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 default.color.matrix = 0\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":164,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 default.color.primaries = 0\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":165,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 default.color.range = 0\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":166,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 default.color.transfer = 0\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":167,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 input.buffers.max-size.value = 6291456\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":168,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 input.delay.value = 0\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":169,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   string input.media-type.value = \"video/avc\"\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":170,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 output.delay.value = 8\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":171,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   string output.media-type.value = \"video/raw\"\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":172,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.color.matrix = 0\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":173,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.color.primaries = 0\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":174,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.color.range = 2\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":175,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.color.transfer = 0\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":176,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.max-size.height = 240\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":177,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.max-size.width = 320\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":178,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.pixel-format.value = 35\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":179,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::i32 raw.rotation.flip = 0\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":180,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::i32 raw.rotation.value = 0\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":181,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.sar.height = 1\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":182,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.sar.width = 1\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":183,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.size.height = 240\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":184,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.size.width = 320\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":185,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2:\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":186,"type":"event","body":{"category":"stdout","output":"W/ColorUtils( 6661): expected specified color aspects (2:0:0:0)\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":187,"type":"event","body":{"category":"stdout","output":"I/MediaCodec( 6661): MediaCodec will operate in async mode\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":188,"type":"event","body":{"category":"stdout","output":"D/MediaCodec( 6661): flushMediametrics\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":189,"type":"event","body":{"category":"stdout","output":"D/SurfaceUtils( 6661): connecting to surface 0x735d423b82a0, reason connectToSurface\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":190,"type":"event","body":{"category":"stdout","output":"I/MediaCodec( 6661): [c2.goldfish.h264.decoder] setting surface generation to 6820865\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":191,"type":"event","body":{"category":"stdout","output":"D/SurfaceUtils( 6661): disconnecting from surface 0x735d423b82a0, reason connectToSurface(reconnect)\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":192,"type":"event","body":{"category":"stdout","output":"D/SurfaceUtils( 6661): connecting to surface 0x735d423b82a0, reason connectToSurface(reconnect)\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":193,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): [c2.goldfish.h264.decoder] buffers are bound to CCodec for this session\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":194,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): no c2 equivalents for csd-1\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":195,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): no c2 equivalents for log-session-id\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":196,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): no c2 equivalents for native-window\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":197,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): no c2 equivalents for flags\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":198,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): config failed => CORRUPTED\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":199,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): c2 config diff is   c2::u32 raw.max-size.height = 720\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":200,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.max-size.width = 1280\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":201,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.size.height = 720\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":202,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.size.width = 1280\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":203,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 1107298332.\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":204,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): client requested max input size 219813, which is smaller than what component recommended (6291456); overriding with component recommendation.\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":205,"type":"event","body":{"category":"stdout","output":"W/CCodec  ( 6661): This behavior is subject to change. It is recommended that app developers double check whether the requested max input size is in reasonable range.\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":206,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): encoding statistics level = 0\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":207,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): setup formats input: AMessage(what = 0x00000000) = {\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":208,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t height = 720\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":209,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t level = 65536\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":210,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t max-input-size = 6291456\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":211,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   string mime = \"video/avc\"\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":212,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t profile = 65536\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":213,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t width = 1280\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":214,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   Rect crop(0, 0, 1279, 719)\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":215,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): }\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":216,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): setup formats output: AMessage(what = 0x00000000) = {\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":217,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t android._color-format = 2135033992\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":218,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t android._video-scaling = 1\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":219,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t rotation-degrees = 0\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":220,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t color-standard = 1\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":221,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t color-range = 2\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":222,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t color-transfer = 3\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":223,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t sar-height = 1\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":224,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t sar-width = 1\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":225,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   Rect crop(0, 0, 1279, 719)\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":226,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t width = 1280\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":227,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t height = 720\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":228,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t max-height = 720\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":229,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t max-width = 1280\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":230,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   string mime = \"video/raw\"\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":231,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t android._dataspace = 260\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":232,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t color-format = 2130708361\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":233,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): }\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":234,"type":"event","body":{"category":"stdout","output":"I/CCodecConfig( 6661): query failed after returning 12 values (BAD_INDEX)\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":235,"type":"event","body":{"category":"stdout","output":"D/MediaCodec( 6661): keep callback message for reclaim\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":236,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 1342179345.\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":237,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 2415921170.\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":238,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 1610614798.\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":239,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 2684356609.\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":240,"type":"event","body":{"category":"stdout","output":"D/C2Store ( 6661): Using DMABUF Heaps\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":241,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.goldfish.h264.decoder#448] Created input block pool with allocatorID 16 => poolID 17 - OK (0)\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":242,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.goldfish.h264.decoder#448] Query output surface allocator returned 0 params => BAD_INDEX (6)\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":243,"type":"event","body":{"category":"stdout","output":"I/CCodecBufferChannel( 6661): [c2.goldfish.h264.decoder#448] Created output block pool with allocatorID 18 => poolID 17 - OK\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":244,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.goldfish.h264.decoder#448] Configured output block pool ids 17 => OK\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":245,"type":"event","body":{"category":"stdout","output":"D/Codec2-OutputBufferQueue( 6661): remote graphic buffer migration 0/0\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":246,"type":"event","body":{"category":"stdout","output":"D/Codec2Client( 6661): setOutputSurface -- failed to set consumer usage (6/BAD_INDEX)\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":247,"type":"event","body":{"category":"stdout","output":"D/Codec2Client( 6661): setOutputSurface -- generation=6820865 consumer usage=0x900\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":248,"type":"event","body":{"category":"stdout","output":"D/Codec2Client( 6661): Surface configure completed\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":249,"type":"event","body":{"category":"stdout","output":"I/DMABUFHEAPS( 6661): Using DMA-BUF heap named: system\n"},"event":"output"}
[8:46:42 AM] [DAP] [Info] <== {"seq":250,"type":"event","body":{"category":"stdout","output":"I/DMCodecAdapterFactory( 6661): Creating an asynchronous MediaCodec adapter for track type audio\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":251,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): allocate(c2.android.aac.decoder)\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":252,"type":"event","body":{"category":"stdout","output":"I/CCodec  ( 6661): setting up 'default' as default (vendor) store\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":253,"type":"event","body":{"category":"stdout","output":"I/CCodec  ( 6661): Created component [c2.android.aac.decoder]\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":254,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): read media type: audio/mp4a-latm\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":255,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: algo.buffers.max-count.values\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":256,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: output.subscribed-indices.values\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":257,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: input.buffers.allocator-ids.values\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":258,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: output.buffers.allocator-ids.values\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":259,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: algo.buffers.allocator-ids.values\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":260,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: output.buffers.pool-ids.values\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":261,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: algo.buffers.pool-ids.values\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":262,"type":"event","body":{"category":"stdout","output":"I/CCodecConfig( 6661): query failed after returning 20 values (BAD_INDEX)\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":263,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): c2 config diff is Dict {\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":264,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.aac-packaging.value = 0\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":265,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.bitrate.value = 64000\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":266,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.pl.level = 0\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":267,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.pl.profile = 8192\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":268,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::i32 coding.drc.album-mode.value = 0\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":269,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::float coding.drc.attenuation-factor.value = 1\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":270,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::float coding.drc.boost-factor.value = 1\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":271,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::i32 coding.drc.compression-mode.value = 3\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":272,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::i32 coding.drc.effect-type.value = 3\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":273,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::float coding.drc.encoded-level.value = 0.25\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":274,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::float coding.drc.reference-level.value = -16\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":275,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 input.buffers.max-size.value = 8192\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":276,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 input.delay.value = 0\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":277,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   string input.media-type.value = \"audio/mp4a-latm\"\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":278,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 output.delay.value = 2\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":279,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::float output.drc.output-loudness.value = 0.25\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":280,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   string output.media-type.value = \"audio/raw\"\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":281,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.channel-count.value = 1\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":282,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.channel-mask.value = 0\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":283,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.max-channel-count.value = 8\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":284,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.sample-rate.value = 44100\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":285,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): }\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":286,"type":"event","body":{"category":"stdout","output":"I/MediaCodec( 6661): MediaCodec will operate in async mode\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":287,"type":"event","body":{"category":"stdout","output":"D/MediaCodec( 6661): flushMediametrics\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":288,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): [c2.android.aac.decoder] buffers are bound to CCodec for this session\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":289,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): no c2 equivalents for log-session-id\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":290,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): no c2 equivalents for flags\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":291,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): config failed => CORRUPTED\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":292,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): c2 config diff is   c2::u32 raw.channel-count.value = 2\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":293,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 1107298332.\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":294,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): client requested max input size 623, which is smaller than what component recommended (8192); overriding with component recommendation.\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":295,"type":"event","body":{"category":"stdout","output":"W/CCodec  ( 6661): This behavior is subject to change. It is recommended that app developers double check whether the requested max input size is in reasonable range.\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":296,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): encoding statistics level = 0\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":297,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): setup formats input: AMessage(what = 0x00000000) = {\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":298,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-drc-album-mode = 0\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":299,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-drc-boost-level = 127\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":300,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-drc-cut-level = 127\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":301,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-drc-effect-type = 3\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":302,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-encoded-target-level = -1\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":303,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-max-output-channel_count = 8\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":304,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-target-ref-level = 64\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":305,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t bitrate = 64000\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":306,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t channel-count = 2\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":307,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t channel-mask = 0\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":308,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t level = 0\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":309,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t max-input-size = 8192\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":310,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t max-output-channel-count = 8\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":311,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   string mime = \"audio/mp4a-latm\"\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":312,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t profile = 2\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":313,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t sample-rate = 44100\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":314,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): }\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":315,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): setup formats output: AMessage(what = 0x00000000) = {\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":316,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-drc-album-mode = 0\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":317,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-drc-boost-level = 127\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":318,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-drc-cut-level = 127\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":319,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-drc-effect-type = 3\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":320,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-drc-output-loudness = -1\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":321,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-encoded-target-level = -1\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":322,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-max-output-channel_count = 8\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":323,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-target-ref-level = 64\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":324,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t channel-count = 2\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":325,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t channel-mask = 0\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":326,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t max-output-channel-count = 8\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":327,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   string mime = \"audio/raw\"\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":328,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t sample-rate = 44100\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":329,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t android._config-pcm-encoding = 2\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":330,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): }\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":331,"type":"event","body":{"category":"stdout","output":"I/CCodecConfig( 6661): query failed after returning 20 values (BAD_INDEX)\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":332,"type":"event","body":{"category":"stdout","output":"D/MediaCodec( 6661): keep callback message for reclaim\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":333,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 1342179345.\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":334,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 2415921170.\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":335,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 1610614798.\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":336,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.android.aac.decoder#723] Created input block pool with allocatorID 16 => poolID 18 - OK (0)\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":337,"type":"event","body":{"category":"stdout","output":"I/CCodecBufferChannel( 6661): [c2.android.aac.decoder#723] Created output block pool with allocatorID 16 => poolID 27 - OK\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":338,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.android.aac.decoder#723] Configured output block pool ids 27 => OK\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":339,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): c2 config diff is   c2::u32 raw.channel-mask.value = 12\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":340,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661): [c2.android.aac.decoder#723:Output[N]] popFromStashAndRegister: at 1000000000000us, output format changed to AMessage(what = 0x00000000) = {\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":341,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t aac-drc-album-mode = 0\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":342,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t aac-drc-boost-level = 127\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":343,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t aac-drc-cut-level = 127\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":344,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t aac-drc-effect-type = 3\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":345,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t aac-drc-output-loudness = -1\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":346,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t aac-encoded-target-level = -1\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":347,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t aac-max-output-channel_count = 8\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":348,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t aac-target-ref-level = 64\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":349,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t channel-count = 2\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":350,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t channel-mask = 12\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":351,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t max-output-channel-count = 8\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":352,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   string mime = \"audio/raw\"\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":353,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t sample-rate = 44100\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":354,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t android._config-pcm-encoding = 2\n"},"event":"output"}
[8:46:43 AM] [DAP] [Info] <== {"seq":355,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661): }\n"},"event":"output"}
[8:46:44 AM] [DAP] [Info] <== {"seq":356,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): c2 config diff is   c2::u32 raw.color.matrix = 1\n"},"event":"output"}
[8:46:44 AM] [DAP] [Info] <== {"seq":357,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.color.primaries = 1\n"},"event":"output"}
[8:46:44 AM] [DAP] [Info] <== {"seq":358,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.color.transfer = 3\n"},"event":"output"}
[8:46:44 AM] [DAP] [Info] <== {"seq":359,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.crop.height = 720\n"},"event":"output"}
[8:46:44 AM] [DAP] [Info] <== {"seq":360,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.crop.left = 0\n"},"event":"output"}
[8:46:44 AM] [DAP] [Info] <== {"seq":361,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.crop.top = 0\n"},"event":"output"}
[8:46:44 AM] [DAP] [Info] <== {"seq":362,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.crop.width = 1280\n"},"event":"output"}
[8:46:48 AM] [DAP] [Info] <== {"seq":363,"type":"event","body":{"category":"stdout","output":"D/BufferPoolAccessor2.0( 6661): bufferpool2 0x735d623c9ea8 : 5(40960 size) total buffers - 0(0 size) used buffers - 20/25 (recycle/alloc) - 5/25 (fetch/transfer)\n"},"event":"output"}
[8:46:48 AM] [DAP] [Info] <== {"seq":364,"type":"event","body":{"category":"stdout","output":"D/BufferPoolAccessor2.0( 6661): evictor expired: 1, evicted: 1\n"},"event":"output"}
[8:46:49 AM] [DAP] [Info] <== {"seq":365,"type":"event","body":{"category":"stdout","output":"D/BufferPoolAccessor2.0( 6661): bufferpool2 0x735d623b6428 : 5(31457280 size) total buffers - 4(25165824 size) used buffers - 18/23 (recycle/alloc) - 5/23 (fetch/transfer)\n"},"event":"output"}
[8:46:49 AM] [DAP] [Info] <== {"seq":366,"type":"event","body":{"category":"stdout","output":"D/BufferPoolAccessor2.0( 6661): evictor expired: 1, evicted: 1\n"},"event":"output"}
[8:47:29 AM] [DAP] [Info] ==> {"command":"hotReload","arguments":{"debounce":true,"onlyFlutter":true,"reason":"save"},"type":"request","seq":12}
[8:47:29 AM] [DAP] [Info] <== {"seq":367,"type":"event","body":{"message":"Hot reloading…","progressId":"hotReload_2","title":"Flutter"},"event":"dart.progressStart"}
[8:47:29 AM] [DAP] [Info] <== {"seq":368,"type":"event","body":{"category":"stdout","output":"Reloaded 1 of 1474 libraries in 371ms.\n"},"event":"output"}
[8:47:29 AM] [DAP] [Info] <== {"seq":369,"type":"event","body":{"progressId":"hotReload_2"},"event":"dart.progressEnd"}
[8:47:29 AM] [DAP] [Info] <== {"seq":370,"type":"response","command":"hotReload","request_seq":12,"success":true}
[8:47:36 AM] [DAP] [Info] ==> {"command":"restart","arguments":{"arguments":{"name":"Dart  (Pixel_3a_API_34_extension_level_7_x86_64)","noDebug":false,"request":"launch","type":"dart","program":"D:\\Flutter\\tintuc\\lib\\main.dart","dartCodeDebugSessionID":"session-4e9e4","projectRootPath":"D:\\Flutter\\tintuc","cwd":"D:\\Flutter\\tintuc","deviceId":"emulator-5554","deviceName":"Pixel_3a_API_34_extension_level_7_x86_64 (android-x64)","toolEnv":{"FLUTTER_HOST":"VSCode","PUB_ENVIRONMENT":"vscode.dart-code","FLUTTER_ROOT":"C:\\src\\flutter"},"sendLogsToClient":false,"sendCustomProgressEvents":true,"allowAnsiColorOutput":true,"additionalProjectPaths":["D:\\Flutter\\tintuc"],"args":[],"vmAdditionalArgs":[],"toolArgs":["-d","emulator-5554","--devtools-server-address","http://127.0.0.1:9100/"],"vmServicePort":0,"dartSdkPath":"C:\\src\\flutter\\bin\\cache\\dart-sdk","vmServiceLogFile":"D:\\Flutter\\tintuc\\logs\\observatory.txt","maxLogLineLength":2000,"dartTestLogFile":"D:\\Flutter\\tintuc\\logs\\dart_test.txt","debugSdkLibraries":true,"debugExternalPackageLibraries":true,"showDartDeveloperLogs":true,"evaluateGettersInDebugViews":true,"showGettersInDebugViews":true,"evaluateToStringInDebugViews":true,"flutterSdkPath":"C:\\src\\flutter","useInspectorNotificationsForWidgetErrors":true,"flutterRunLogFile":"D:\\Flutter\\tintuc\\logs\\flutter_run.txt","flutterTestLogFile":"D:\\Flutter\\tintuc\\logs\\flutter_test.txt","showMemoryUsage":false,"debuggerType":2,"__sessionId":"2c57e826-2048-497d-9c9a-8720a27bdaba"}},"type":"request","seq":13}
[8:47:36 AM] [DAP] [Info] <== {"seq":371,"type":"event","body":{"message":"Hot restarting…","progressId":"hotRestart_3","title":"Flutter"},"event":"dart.progressStart"}
[8:47:37 AM] [DAP] [Info] <== {"seq":372,"type":"event","body":{"reason":"exited","threadId":1},"event":"thread"}
[8:47:37 AM] [DAP] [Info] <== {"seq":373,"type":"event","body":{"reason":"started","threadId":2},"event":"thread"}
[8:47:37 AM] [DAP] [Info] <== {"seq":374,"type":"event","body":{"category":"stdout","output":"Restarted application in 1,688ms.\n"},"event":"output"}
[8:47:37 AM] [DAP] [Info] <== {"seq":375,"type":"event","body":{"progressId":"hotRestart_3"},"event":"dart.progressEnd"}
[8:47:37 AM] [DAP] [Info] <== {"seq":376,"type":"response","command":"restart","request_seq":13,"success":true}
[8:47:38 AM] [DAP] [Info] ==> {"command":"threads","type":"request","seq":14}
[8:47:38 AM] [DAP] [Info] <== {"seq":377,"type":"response","body":{"threads":[{"id":2,"name":"main"}]},"command":"threads","request_seq":14,"success":true}
[8:47:38 AM] [DAP] [Info] <== {"seq":378,"type":"event","body":{"extensionRPC":"ext.ui.window.scheduleFrame","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":379,"type":"event","body":{"extensionRPC":"ext.ui.window.reinitializeShader","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":380,"type":"event","body":{"extensionRPC":"ext.ui.window.impellerEnabled","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":381,"type":"event","body":{"extensionRPC":"ext.dart.io.getHttpEnableTimelineLogging","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":382,"type":"event","body":{"extensionRPC":"ext.dart.io.setHttpEnableTimelineLogging","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":383,"type":"event","body":{"extensionRPC":"ext.dart.io.httpEnableTimelineLogging","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":384,"type":"event","body":{"extensionRPC":"ext.dart.io.getSocketProfile","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":385,"type":"event","body":{"extensionRPC":"ext.dart.io.startSocketProfiling","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":386,"type":"event","body":{"extensionRPC":"ext.dart.io.pauseSocketProfiling","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":387,"type":"event","body":{"extensionRPC":"ext.dart.io.socketProfilingEnabled","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":388,"type":"event","body":{"extensionRPC":"ext.dart.io.clearSocketProfile","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":389,"type":"event","body":{"extensionRPC":"ext.dart.io.getVersion","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":390,"type":"event","body":{"extensionRPC":"ext.dart.io.getHttpProfile","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":391,"type":"event","body":{"extensionRPC":"ext.dart.io.getHttpProfileRequest","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":392,"type":"event","body":{"extensionRPC":"ext.dart.io.clearHttpProfile","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":393,"type":"event","body":{"extensionRPC":"ext.flutter.reassemble","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":394,"type":"event","body":{"extensionRPC":"ext.flutter.exit","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":395,"type":"event","body":{"extensionRPC":"ext.flutter.connectedVmServiceUri","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":396,"type":"event","body":{"extensionRPC":"ext.flutter.activeDevToolsServerAddress","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":397,"type":"event","body":{"extensionRPC":"ext.flutter.platformOverride","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":398,"type":"event","body":{"extensionRPC":"ext.flutter.brightnessOverride","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":399,"type":"event","body":{"extensionRPC":"ext.flutter.timeDilation","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":400,"type":"event","body":{"extensionRPC":"ext.flutter.evict","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":401,"type":"event","body":{"extensionRPC":"ext.flutter.invertOversizedImages","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":402,"type":"event","body":{"extensionRPC":"ext.flutter.debugPaint","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":403,"type":"event","body":{"extensionRPC":"ext.flutter.debugPaintBaselinesEnabled","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":404,"type":"event","body":{"extensionRPC":"ext.flutter.repaintRainbow","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":405,"type":"event","body":{"extensionRPC":"ext.flutter.debugDumpLayerTree","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":406,"type":"event","body":{"extensionRPC":"ext.flutter.debugDisableClipLayers","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":407,"type":"event","body":{"extensionRPC":"ext.flutter.debugDisablePhysicalShapeLayers","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":408,"type":"event","body":{"extensionRPC":"ext.flutter.debugDisableOpacityLayers","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":409,"type":"event","body":{"extensionRPC":"ext.flutter.debugDumpRenderTree","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":410,"type":"event","body":{"extensionRPC":"ext.flutter.debugDumpSemanticsTreeInTraversalOrder","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":411,"type":"event","body":{"extensionRPC":"ext.flutter.debugDumpSemanticsTreeInInverseHitTestOrder","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":412,"type":"event","body":{"extensionRPC":"ext.flutter.profileRenderObjectPaints","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":413,"type":"event","body":{"extensionRPC":"ext.flutter.profileRenderObjectLayouts","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":414,"type":"event","body":{"extensionRPC":"ext.flutter.debugDumpApp","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":415,"type":"event","body":{"extensionRPC":"ext.flutter.debugDumpFocusTree","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":416,"type":"event","body":{"extensionRPC":"ext.flutter.showPerformanceOverlay","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":417,"type":"event","body":{"extensionRPC":"ext.flutter.didSendFirstFrameEvent","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":418,"type":"event","body":{"extensionRPC":"ext.flutter.didSendFirstFrameRasterizedEvent","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":419,"type":"event","body":{"extensionRPC":"ext.flutter.profileWidgetBuilds","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":420,"type":"event","body":{"extensionRPC":"ext.flutter.profileUserWidgetBuilds","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":421,"type":"event","body":{"extensionRPC":"ext.flutter.debugAllowBanner","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":422,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.structuredErrors","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":423,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.show","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":424,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.trackRebuildDirtyWidgets","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":425,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.trackRepaintWidgets","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":426,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.disposeAllGroups","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":427,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.disposeGroup","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":428,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.isWidgetTreeReady","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":429,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.disposeId","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":430,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.setPubRootDirectories","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":431,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.addPubRootDirectories","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":432,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.removePubRootDirectories","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":433,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getPubRootDirectories","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":434,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.setSelectionById","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":435,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getParentChain","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":436,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getProperties","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":437,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getChildren","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":438,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getChildrenSummaryTree","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":439,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getChildrenDetailsSubtree","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":440,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getRootWidget","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] ==> {"command":"callService","arguments":{"method":"ext.flutter.inspector.setPubRootDirectories","params":{"isolateId":"isolates/1813687878919455","arg0":"file:///D:/Flutter/tintuc"}},"type":"request","seq":15}
[8:47:38 AM] [DAP] [Info] <== {"seq":441,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getRootWidgetSummaryTree","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":442,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getRootWidgetSummaryTreeWithPreviews","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":443,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getDetailsSubtree","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":444,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getSelectedWidget","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":445,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getSelectedSummaryWidget","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":446,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.isWidgetCreationTracked","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":447,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.screenshot","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":448,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getLayoutExplorerNode","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":449,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.setFlexFit","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":450,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.setFlexFactor","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":451,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.setFlexProperties","isolateId":"isolates/1813687878919455"},"event":"dart.serviceExtensionAdded"}
[8:47:38 AM] [DAP] [Info] <== {"seq":452,"type":"event","body":{"extension":"ext.flutter.activeDevToolsServerAddress","value":"http://127.0.0.1:9100"},"event":"flutter.serviceExtensionStateChanged"}
[8:47:38 AM] [DAP] [Info] <== {"seq":453,"type":"event","body":{"extension":"ext.flutter.connectedVmServiceUri","value":"http://127.0.0.1:53363/V8WO2g36KlE=/"},"event":"flutter.serviceExtensionStateChanged"}
[8:47:38 AM] [DAP] [Info] <== {"seq":454,"type":"response","body":{"result":null,"type":"_extensionType","method":"ext.flutter.inspector.setPubRootDirectories"},"command":"callService","request_seq":15,"success":true}
[8:47:38 AM] [DAP] [Info] <== {"seq":455,"type":"event","body":{"category":"stdout","output":"D/FRCPlugin( 6661): Sending fetchTimeout: 60\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":456,"type":"event","body":{"category":"stdout","output":"D/BufferPoolAccessor2.0( 6661): bufferpool2 0x735d623b6428 : 4(25165824 size) total buffers - 4(25165824 size) used buffers - 18/23 (recycle/alloc) - 5/23 (fetch/transfer)\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":457,"type":"event","body":{"category":"stdout","output":"D/BufferPoolAccessor2.0( 6661): bufferpool2 0x735d623c9ea8 : 0(0 size) total buffers - 0(0 size) used buffers - 20/25 (recycle/alloc) - 5/25 (fetch/transfer)\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":458,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-0](id:1a0500000002,api:3,p:6661,c:6661) cancelBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":459,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-0](id:1a0500000002,api:3,p:6661,c:6661) cancelBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":460,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-0](id:1a0500000002,api:3,p:6661,c:6661) dequeueBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":461,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-0](id:1a0500000002,api:3,p:6661,c:6661) cancelBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":462,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-0](id:1a0500000002,api:3,p:6661,c:6661) cancelBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":463,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-0](id:1a0500000002,api:3,p:6661,c:6661) cancelBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":464,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-0](id:1a0500000002,api:3,p:6661,c:6661) cancelBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":465,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-0](id:1a0500000002,api:3,p:6661,c:6661) cancelBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":466,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-0](id:1a0500000002,api:3,p:6661,c:6661) cancelBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":467,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.goldfish.h264.decoder#448] flushed work; ignored.\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":468,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.goldfish.h264.decoder#448] Discard frames from previous generation.\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":469,"type":"event","body":{"category":"stdout","output":"D/MediaCodec( 6661): keep callback message for reclaim\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":470,"type":"event","body":{"category":"stdout","output":"I/ExoPlayerImpl( 6661): Release 1b3bd4f [ExoPlayerLib/2.18.7] [emu64xa, sdk_gphone64_x86_64, Google, 34] [goog.exo.core, goog.exo.exoplayer, goog.exo.decoder, goog.exo.datasource, goog.exo.extractor]\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":471,"type":"event","body":{"category":"stdout","output":"I/CCodecConfig( 6661): query failed after returning 12 values (BAD_INDEX)\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":472,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): c2 config diff is   c2::u32 coded.vui.color.matrix = 1\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":473,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.vui.color.primaries = 1\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":474,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.vui.color.transfer = 3\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":475,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 1342179345.\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":476,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 2415921170.\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":477,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 1610614798.\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":478,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661): [c2.android.aac.decoder#723:1D-Output.Impl[N]] Client returned a buffer it does not own according to our record: 0\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":479,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661): [c2.android.aac.decoder#723:1D-Output.Impl[N]] Client returned a buffer it does not own according to our record: 1\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":480,"type":"event","body":{"category":"stdout","output":"D/MediaCodec( 6661): keep callback message for reclaim\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":481,"type":"event","body":{"category":"stdout","output":"I/CCodecConfig( 6661): query failed after returning 20 values (BAD_INDEX)\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":482,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 1342179345.\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":483,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 2415921170.\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":484,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 1610614798.\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":485,"type":"event","body":{"category":"stdout","output":"D/SurfaceUtils( 6661): connecting to surface 0x735d423b3e80, reason connectToSurface\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":486,"type":"event","body":{"category":"stdout","output":"I/MediaCodec( 6661): [c2.goldfish.h264.decoder] setting surface generation to 6820866\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":487,"type":"event","body":{"category":"stdout","output":"D/SurfaceUtils( 6661): disconnecting from surface 0x735d423b3e80, reason connectToSurface(reconnect)\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":488,"type":"event","body":{"category":"stdout","output":"D/SurfaceUtils( 6661): connecting to surface 0x735d423b3e80, reason connectToSurface(reconnect)\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":489,"type":"event","body":{"category":"stdout","output":"D/Codec2-OutputBufferQueue( 6661): remote graphic buffer migration 0/0\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":490,"type":"event","body":{"category":"stdout","output":"D/Codec2Client( 6661): setOutputSurface -- failed to set consumer usage (6/BAD_INDEX)\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":491,"type":"event","body":{"category":"stdout","output":"D/Codec2Client( 6661): setOutputSurface -- generation=6820866 consumer usage=0x900\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":492,"type":"event","body":{"category":"stdout","output":"D/Codec2Client( 6661): Surface configure completed\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":493,"type":"event","body":{"category":"stdout","output":"D/SurfaceUtils( 6661): disconnecting from surface 0x735d423b82a0, reason disconnectFromSurface\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":494,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.goldfish.h264.decoder#448] MediaCodec discarded an unknown buffer\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":495,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.goldfish.h264.decoder#448] MediaCodec discarded an unknown buffer\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":496,"type":"event","body":{"category":"stdout","output":"I/hw-BpHwBinder( 6661): onLastStrongRef automatically unlinking death recipients\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":497,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.goldfish.h264.decoder#448] MediaCodec discarded an unknown buffer\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":498,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.goldfish.h264.decoder#448] MediaCodec discarded an unknown buffer\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":499,"type":"event","body":{"category":"stdout","output":"D/SurfaceUtils( 6661): disconnecting from surface 0x735d423b3e80, reason disconnectFromSurface\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":500,"type":"event","body":{"category":"stdout","output":"D/MediaCodec( 6661): flushMediametrics\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":501,"type":"event","body":{"category":"stdout","output":"D/MediaCodec( 6661): flushMediametrics\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":502,"type":"event","body":{"category":"stdout","output":"W/MediaCodec( 6661): no metrics handle found\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":503,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.android.aac.decoder#723] MediaCodec discarded an unknown buffer\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":504,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.android.aac.decoder#723] MediaCodec discarded an unknown buffer\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":505,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.android.aac.decoder#723] MediaCodec discarded an unknown buffer\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":506,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.android.aac.decoder#723] MediaCodec discarded an unknown buffer\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":507,"type":"event","body":{"category":"stdout","output":"I/hw-BpHwBinder( 6661): onLastStrongRef automatically unlinking death recipients\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":508,"type":"event","body":{"category":"stdout","output":"D/MediaCodec( 6661): flushMediametrics\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":509,"type":"event","body":{"category":"stdout","output":"D/MediaCodec( 6661): flushMediametrics\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":510,"type":"event","body":{"category":"stdout","output":"W/MediaCodec( 6661): no metrics handle found\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":511,"type":"event","body":{"category":"stdout","output":"I/ExoPlayerImpl( 6661): Init 7526662 [ExoPlayerLib/2.18.7] [emu64xa, sdk_gphone64_x86_64, Google, 34]\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":512,"type":"event","body":{"category":"stdout","output":"I/Surface ( 6661): Surface::setFrameRate is deprecated, setFrameRate hint is dropped as destination is not SurfaceFlinger\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":513,"type":"event","body":{"category":"stdout","output":"D/TrafficStats( 6661): tagSocket(141) with statsTag=0xffffffff, statsUid=-1\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":514,"type":"event","body":{"category":"stdout","output":"W/DynamiteModule( 6661): Local module descriptor class for com.google.android.gms.providerinstaller.dynamite not found.\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":515,"type":"event","body":{"category":"stdout","output":"I/DynamiteModule( 6661): Considering local module com.google.android.gms.providerinstaller.dynamite:0 and remote module com.google.android.gms.providerinstaller.dynamite:0\n"},"event":"output"}
[8:47:39 AM] [DAP] [Info] <== {"seq":516,"type":"event","body":{"category":"stdout","output":"W/ProviderInstaller( 6661): Failed to load providerinstaller module: No acceptable module com.google.android.gms.providerinstaller.dynamite found. Local version is 0 and remote version is 0.\n"},"event":"output"}
[8:47:40 AM] [DAP] [Info] <== {"seq":517,"type":"event","body":{"category":"stdout","output":"D/TrafficStats( 6661): tagSocket(148) with statsTag=0xffffffff, statsUid=-1\n"},"event":"output"}
[8:47:40 AM] [DAP] [Info] <== {"seq":518,"type":"event","body":{"reason":"exception","text":"SocketException (SocketException: Failed host lookup: '64fc7845605a026163ae88c0.mockapi.io' (OS Error: No address associated with hostname, errno = 7))","threadId":2},"event":"stopped"}
[8:47:40 AM] [DAP] [Info] ==> {"command":"threads","type":"request","seq":16}
[8:47:40 AM] [DAP] [Info] <== {"seq":519,"type":"response","body":{"threads":[{"id":2,"name":"main"}]},"command":"threads","request_seq":16,"success":true}
[8:47:40 AM] [DAP] [Info] ==> {"command":"stackTrace","arguments":{"threadId":2,"startFrame":0,"levels":1},"type":"request","seq":17}
[8:47:40 AM] [DAP] [Info] <== {"seq":520,"type":"response","body":{"stackFrames":[{"canRestart":false,"column":9,"id":9,"line":520,"name":"_NativeSocket.lookup.<anonymous closure>","source":{"adapterData":{"type":"@Script","id":"libraries/@13069316/scripts/dart%3Aio-patch%2Fsocket_patch.dart/0","fixedId":true,"uri":"dart:io-patch/socket_patch.dart"},"name":"dart:io-patch/socket_patch.dart","origin":"from the SDK","path":"C:\\src\\flutter\\bin\\cache\\pkg\\sky_engine\\lib\\_internal\\vm\\bin\\socket_patch.dart","sourceReference":10}}],"totalFrames":21},"command":"stackTrace","request_seq":17,"success":true}
[8:47:40 AM] [DAP] [Info] ==> {"command":"source","arguments":{"sourceReference":10,"source":{"adapterData":{"type":"@Script","id":"libraries/@13069316/scripts/dart%3Aio-patch%2Fsocket_patch.dart/0","fixedId":true,"uri":"dart:io-patch/socket_patch.dart"},"name":"dart:io-patch/socket_patch.dart","origin":"from the SDK","path":"C:\\src\\flutter\\bin\\cache\\pkg\\sky_engine\\lib\\_internal\\vm\\bin\\socket_patch.dart","sourceReference":10}},"type":"request","seq":18}
[8:47:40 AM] [DAP] [Info] <== {"seq":521,"type":"response","body":{"content":"// Copyright (c) 2013, the Dart project authors.  Please see the AUTHORS file\n// for details. All rights reserved. Use of this source code is governed by a\n// BSD-style license that can be found in the LICENSE file.\n\npart of \"common_patch.dart\";\n\n@patch\nclass RawServerSocket {\n  @patch\n  static Future<RawServerSocket> bind(address, int port,\n      {int backlog = 0, bool v6Only = false, bool shared = false}) {\n    return _RawServerSocket.bind(address, port, backlog, v6Only, shared);\n  }\n}\n\n@patch\nclass RawSocket {\n  @patch\n  static Future<RawSocket> connect(dynamic host, int port,\n      {dynamic sourceAddress, int sourcePort = 0, Duration? timeout}) {\n    return _RawSocket.connect(host, port, sourceAddress, sourcePort, timeout);\n  }\n\n  @patch\n  static Future<ConnectionTask<RawSocket>> startConnect(dynamic host, int port,\n      {dynamic sourceAddress, int sourcePort = 0}) {\n    return _RawSocket.startConnect(host, port, sourceAddress, sourcePort);\n  }\n}\n\n@patch\nclass RawSocketOption {\n  static final List<int?> _optionsCache =\n      List<int?>.filled(_RawSocketOptions.values.length, null);\n\n  @patch\n  static int _getOptionValue(int key) {\n    if (key > _RawSocketOptions.values.length) {\n      throw ArgumentError.value(key, 'key');\n    }\n    return _optionsCache[key] ??= _getNativeOptionValue(key);\n  }\n\n  @pragma(\"vm:external-name\", \"RawSocketOption_GetOptionValue\")\n  external static int _getNativeOptionValue(int key);\n}\n\n@patch\nclass InternetAddress {\n  @patch\n  static InternetAddress get loopbackIPv4 {\n    return _InternetAddress.loopbackIPv4;\n  }\n\n  @patch\n  static InternetAddress get loopbackIPv6 {\n    return _InternetAddress.loopbackIPv6;\n  }\n\n  @patch\n  static InternetAddress get anyIPv4 {\n    return _InternetAddress.anyIPv4;\n  }\n\n  @patch\n  static InternetAddress get anyIPv6 {\n    return _InternetAddress.anyIPv6;\n  }\n\n  @patch\n  factory …
[8:47:40 AM] [DAP] [Info] <== {"seq":522,"type":"event","body":{"category":"stdout","output":"D/TrafficStats( 6661): tagSocket(141) with statsTag=0xffffffff, statsUid=-1\n"},"event":"output"}
[8:47:40 AM] [DAP] [Info] ==> {"command":"stackTrace","arguments":{"threadId":2,"startFrame":1,"levels":19},"type":"request","seq":19}
[8:47:41 AM] [DAP] [Info] <== {"seq":523,"type":"response","body":{"stackFrames":[{"column":0,"id":11,"line":0,"name":"<asynchronous gap>","presentationHint":"label"},{"canRestart":false,"column":29,"id":12,"line":633,"name":"_NativeSocket.staggeredLookup.<anonymous closure>.lookupAddresses","source":{"adapterData":{"type":"@Script","id":"libraries/@13069316/scripts/dart%3Aio-patch%2Fsocket_patch.dart/0","fixedId":true,"uri":"dart:io-patch/socket_patch.dart"},"name":"dart:io-patch/socket_patch.dart","origin":"from the SDK","path":"C:\\src\\flutter\\bin\\cache\\pkg\\sky_engine\\lib\\_internal\\vm\\bin\\socket_patch.dart","sourceReference":14}},{"column":0,"id":13,"line":0,"name":"<asynchronous gap>","presentationHint":"label"}],"totalFrames":4},"command":"stackTrace","request_seq":19,"success":true}
[8:47:42 AM] [DAP] [Info] <== {"seq":524,"type":"event","body":{"category":"stdout","output":"I/DMCodecAdapterFactory( 6661): Creating an asynchronous MediaCodec adapter for track type video\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":525,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): allocate(c2.goldfish.h264.decoder)\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":526,"type":"event","body":{"category":"stdout","output":"I/CCodec  ( 6661): setting up 'default' as default (vendor) store\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":527,"type":"event","body":{"category":"stdout","output":"I/CCodec  ( 6661): Created component [c2.goldfish.h264.decoder]\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":528,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): read media type: video/avc\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":529,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: algo.buffers.max-count.values\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":530,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: output.subscribed-indices.values\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":531,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: input.buffers.allocator-ids.values\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":532,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: output.buffers.allocator-ids.values\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":533,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: algo.buffers.allocator-ids.values\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":534,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: output.buffers.pool-ids.values\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":535,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: algo.buffers.pool-ids.values\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":536,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): ignored struct field coded.color-format.locations\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":537,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): ignoring local param raw.size (0xd2001800) as it is already supported\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":538,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): ignoring local param default.color (0x5200180b) as it is already supported\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":539,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): ignored struct field raw.hdr-static-info.mastering\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":540,"type":"event","body":{"category":"stdout","output":"I/CCodecConfig( 6661): query failed after returning 12 values (BAD_INDEX)\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":541,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): c2 config diff is Dict {\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":542,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.pl.level = 20496\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":543,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.pl.profile = 20481\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":544,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.vui.color.matrix = 0\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":545,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.vui.color.primaries = 0\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":546,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.vui.color.range = 2\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":547,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.vui.color.transfer = 0\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":548,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 default.color.matrix = 0\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":549,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 default.color.primaries = 0\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":550,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 default.color.range = 0\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":551,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 default.color.transfer = 0\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":552,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 input.buffers.max-size.value = 6291456\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":553,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 input.delay.value = 0\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":554,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   string input.media-type.value = \"video/avc\"\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":555,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 output.delay.value = 8\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":556,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   string output.media-type.value = \"video/raw\"\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":557,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.color.matrix = 0\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":558,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.color.primaries = 0\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":559,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.color.range = 2\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":560,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.color.transfer = 0\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":561,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.max-size.height = 240\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":562,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.max-size.width = 320\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":563,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.pixel-format.value = 35\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":564,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::i32 raw.rotation.flip = 0\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":565,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::i32 raw.rotation.value = 0\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":566,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.sar.height = 1\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":567,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.sar.width = 1\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":568,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.size.height = 240\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":569,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.size.width = 320\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":570,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2:\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":571,"type":"event","body":{"category":"stdout","output":"W/ColorUtils( 6661): expected specified color aspects (2:0:0:0)\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":572,"type":"event","body":{"category":"stdout","output":"I/MediaCodec( 6661): MediaCodec will operate in async mode\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":573,"type":"event","body":{"category":"stdout","output":"D/MediaCodec( 6661): flushMediametrics\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":574,"type":"event","body":{"category":"stdout","output":"D/SurfaceUtils( 6661): connecting to surface 0x735d423b82a0, reason connectToSurface\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":575,"type":"event","body":{"category":"stdout","output":"I/MediaCodec( 6661): [c2.goldfish.h264.decoder] setting surface generation to 6820867\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":576,"type":"event","body":{"category":"stdout","output":"D/SurfaceUtils( 6661): disconnecting from surface 0x735d423b82a0, reason connectToSurface(reconnect)\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":577,"type":"event","body":{"category":"stdout","output":"D/SurfaceUtils( 6661): connecting to surface 0x735d423b82a0, reason connectToSurface(reconnect)\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":578,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): [c2.goldfish.h264.decoder] buffers are bound to CCodec for this session\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":579,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): no c2 equivalents for csd-1\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":580,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): no c2 equivalents for log-session-id\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":581,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): no c2 equivalents for native-window\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":582,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): no c2 equivalents for flags\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":583,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): config failed => CORRUPTED\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":584,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): c2 config diff is   c2::u32 raw.max-size.height = 720\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":585,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.max-size.width = 1280\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":586,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.size.height = 720\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":587,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.size.width = 1280\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":588,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 1107298332.\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":589,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): client requested max input size 219813, which is smaller than what component recommended (6291456); overriding with component recommendation.\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":590,"type":"event","body":{"category":"stdout","output":"W/CCodec  ( 6661): This behavior is subject to change. It is recommended that app developers double check whether the requested max input size is in reasonable range.\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":591,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): encoding statistics level = 0\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":592,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): setup formats input: AMessage(what = 0x00000000) = {\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":593,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t height = 720\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":594,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t level = 65536\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":595,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t max-input-size = 6291456\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":596,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   string mime = \"video/avc\"\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":597,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t profile = 65536\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":598,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t width = 1280\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":599,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   Rect crop(0, 0, 1279, 719)\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":600,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): }\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":601,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): setup formats output: AMessage(what = 0x00000000) = {\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":602,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t android._color-format = 2135033992\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":603,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t android._video-scaling = 1\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":604,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t rotation-degrees = 0\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":605,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t color-standard = 1\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":606,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t color-range = 2\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":607,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t color-transfer = 3\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":608,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t sar-height = 1\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":609,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t sar-width = 1\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":610,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   Rect crop(0, 0, 1279, 719)\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":611,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t width = 1280\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":612,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t height = 720\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":613,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t max-height = 720\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":614,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t max-width = 1280\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":615,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   string mime = \"video/raw\"\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":616,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t android._dataspace = 260\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":617,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t color-format = 2130708361\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":618,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): }\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":619,"type":"event","body":{"category":"stdout","output":"I/CCodecConfig( 6661): query failed after returning 12 values (BAD_INDEX)\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":620,"type":"event","body":{"category":"stdout","output":"D/MediaCodec( 6661): keep callback message for reclaim\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":621,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 1342179345.\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":622,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 2415921170.\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":623,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 1610614798.\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":624,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 2684356609.\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":625,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.goldfish.h264.decoder#777] Created input block pool with allocatorID 16 => poolID 19 - OK (0)\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":626,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.goldfish.h264.decoder#777] Query output surface allocator returned 0 params => BAD_INDEX (6)\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":627,"type":"event","body":{"category":"stdout","output":"I/CCodecBufferChannel( 6661): [c2.goldfish.h264.decoder#777] Created output block pool with allocatorID 18 => poolID 18 - OK\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":628,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.goldfish.h264.decoder#777] Configured output block pool ids 18 => OK\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":629,"type":"event","body":{"category":"stdout","output":"D/Codec2-OutputBufferQueue( 6661): remote graphic buffer migration 0/0\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":630,"type":"event","body":{"category":"stdout","output":"D/Codec2Client( 6661): setOutputSurface -- failed to set consumer usage (6/BAD_INDEX)\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":631,"type":"event","body":{"category":"stdout","output":"D/Codec2Client( 6661): setOutputSurface -- generation=6820867 consumer usage=0x900\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":632,"type":"event","body":{"category":"stdout","output":"D/Codec2Client( 6661): Surface configure completed\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":633,"type":"event","body":{"category":"stdout","output":"I/DMCodecAdapterFactory( 6661): Creating an asynchronous MediaCodec adapter for track type audio\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":634,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): allocate(c2.android.aac.decoder)\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":635,"type":"event","body":{"category":"stdout","output":"I/CCodec  ( 6661): setting up 'default' as default (vendor) store\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":636,"type":"event","body":{"category":"stdout","output":"I/CCodec  ( 6661): Created component [c2.android.aac.decoder]\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":637,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): read media type: audio/mp4a-latm\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":638,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.goldfish.h264.decoder#777] Ignoring stale input buffer done callback: last flush index = 0, frameIndex = 0\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":639,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: algo.buffers.max-count.values\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":640,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: output.subscribed-indices.values\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":641,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: input.buffers.allocator-ids.values\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":642,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: output.buffers.allocator-ids.values\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":643,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: algo.buffers.allocator-ids.values\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":644,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: output.buffers.pool-ids.values\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":645,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: algo.buffers.pool-ids.values\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":646,"type":"event","body":{"category":"stdout","output":"I/CCodecConfig( 6661): query failed after returning 20 values (BAD_INDEX)\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":647,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): c2 config diff is Dict {\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":648,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.aac-packaging.value = 0\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":649,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.bitrate.value = 64000\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":650,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.pl.level = 0\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":651,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.pl.profile = 8192\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":652,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::i32 coding.drc.album-mode.value = 0\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":653,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::float coding.drc.attenuation-factor.value = 1\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":654,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::float coding.drc.boost-factor.value = 1\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":655,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::i32 coding.drc.compression-mode.value = 3\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":656,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::i32 coding.drc.effect-type.value = 3\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":657,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::float coding.drc.encoded-level.value = 0.25\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":658,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::float coding.drc.reference-level.value = -16\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":659,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 input.buffers.max-size.value = 8192\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":660,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 input.delay.value = 0\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":661,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   string input.media-type.value = \"audio/mp4a-latm\"\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":662,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 output.delay.value = 2\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":663,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::float output.drc.output-loudness.value = 0.25\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":664,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   string output.media-type.value = \"audio/raw\"\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":665,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.channel-count.value = 1\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":666,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.channel-mask.value = 0\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":667,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.max-channel-count.value = 8\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":668,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.sample-rate.value = 44100\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":669,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): }\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":670,"type":"event","body":{"category":"stdout","output":"I/MediaCodec( 6661): MediaCodec will operate in async mode\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":671,"type":"event","body":{"category":"stdout","output":"D/MediaCodec( 6661): flushMediametrics\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":672,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): [c2.android.aac.decoder] buffers are bound to CCodec for this session\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":673,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): no c2 equivalents for log-session-id\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":674,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): no c2 equivalents for flags\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":675,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): config failed => CORRUPTED\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":676,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): c2 config diff is   c2::u32 raw.channel-count.value = 2\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":677,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 1107298332.\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":678,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): client requested max input size 623, which is smaller than what component recommended (8192); overriding with component recommendation.\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":679,"type":"event","body":{"category":"stdout","output":"W/CCodec  ( 6661): This behavior is subject to change. It is recommended that app developers double check whether the requested max input size is in reasonable range.\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":680,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): encoding statistics level = 0\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":681,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): setup formats input: AMessage(what = 0x00000000) = {\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":682,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-drc-album-mode = 0\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":683,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-drc-boost-level = 127\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":684,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-drc-cut-level = 127\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":685,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-drc-effect-type = 3\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":686,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-encoded-target-level = -1\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":687,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-max-output-channel_count = 8\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":688,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-target-ref-level = 64\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":689,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t bitrate = 64000\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":690,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t channel-count = 2\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":691,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t channel-mask = 0\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":692,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t level = 0\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":693,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t max-input-size = 8192\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":694,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t max-output-channel-count = 8\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":695,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   string mime = \"audio/mp4a-latm\"\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":696,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t profile = 2\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":697,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t sample-rate = 44100\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":698,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): }\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":699,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): setup formats output: AMessage(what = 0x00000000) = {\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":700,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-drc-album-mode = 0\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":701,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-drc-boost-level = 127\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":702,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-drc-cut-level = 127\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":703,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-drc-effect-type = 3\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":704,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-drc-output-loudness = -1\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":705,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-encoded-target-level = -1\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":706,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-max-output-channel_count = 8\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":707,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-target-ref-level = 64\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":708,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t channel-count = 2\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":709,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t channel-mask = 0\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":710,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t max-output-channel-count = 8\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":711,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   string mime = \"audio/raw\"\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":712,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t sample-rate = 44100\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":713,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t android._config-pcm-encoding = 2\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":714,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): }\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":715,"type":"event","body":{"category":"stdout","output":"I/CCodecConfig( 6661): query failed after returning 20 values (BAD_INDEX)\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":716,"type":"event","body":{"category":"stdout","output":"D/MediaCodec( 6661): keep callback message for reclaim\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":717,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 1342179345.\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":718,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 2415921170.\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":719,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 1610614798.\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":720,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.android.aac.decoder#263] Created input block pool with allocatorID 16 => poolID 20 - OK (0)\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":721,"type":"event","body":{"category":"stdout","output":"I/CCodecBufferChannel( 6661): [c2.android.aac.decoder#263] Created output block pool with allocatorID 16 => poolID 28 - OK\n"},"event":"output"}
[8:47:42 AM] [DAP] [Info] <== {"seq":722,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.android.aac.decoder#263] Configured output block pool ids 28 => OK\n"},"event":"output"}
[8:47:43 AM] [DAP] [Info] <== {"seq":723,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): c2 config diff is   c2::u32 raw.channel-mask.value = 12\n"},"event":"output"}
[8:47:43 AM] [DAP] [Info] <== {"seq":724,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661): [c2.android.aac.decoder#263:Output[N]] popFromStashAndRegister: at 1000000000000us, output format changed to AMessage(what = 0x00000000) = {\n"},"event":"output"}
[8:47:43 AM] [DAP] [Info] <== {"seq":725,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t aac-drc-album-mode = 0\n"},"event":"output"}
[8:47:43 AM] [DAP] [Info] <== {"seq":726,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t aac-drc-boost-level = 127\n"},"event":"output"}
[8:47:43 AM] [DAP] [Info] <== {"seq":727,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t aac-drc-cut-level = 127\n"},"event":"output"}
[8:47:43 AM] [DAP] [Info] <== {"seq":728,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t aac-drc-effect-type = 3\n"},"event":"output"}
[8:47:43 AM] [DAP] [Info] <== {"seq":729,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t aac-drc-output-loudness = -1\n"},"event":"output"}
[8:47:43 AM] [DAP] [Info] <== {"seq":730,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t aac-encoded-target-level = -1\n"},"event":"output"}
[8:47:43 AM] [DAP] [Info] <== {"seq":731,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t aac-max-output-channel_count = 8\n"},"event":"output"}
[8:47:43 AM] [DAP] [Info] <== {"seq":732,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t aac-target-ref-level = 64\n"},"event":"output"}
[8:47:43 AM] [DAP] [Info] <== {"seq":733,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t channel-count = 2\n"},"event":"output"}
[8:47:43 AM] [DAP] [Info] <== {"seq":734,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t channel-mask = 12\n"},"event":"output"}
[8:47:43 AM] [DAP] [Info] <== {"seq":735,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t max-output-channel-count = 8\n"},"event":"output"}
[8:47:43 AM] [DAP] [Info] <== {"seq":736,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   string mime = \"audio/raw\"\n"},"event":"output"}
[8:47:43 AM] [DAP] [Info] <== {"seq":737,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t sample-rate = 44100\n"},"event":"output"}
[8:47:43 AM] [DAP] [Info] <== {"seq":738,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t android._config-pcm-encoding = 2\n"},"event":"output"}
[8:47:43 AM] [DAP] [Info] <== {"seq":739,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661): }\n"},"event":"output"}
[8:47:43 AM] [DAP] [Info] <== {"seq":740,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): c2 config diff is   c2::u32 raw.color.matrix = 1\n"},"event":"output"}
[8:47:43 AM] [DAP] [Info] <== {"seq":741,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.color.primaries = 1\n"},"event":"output"}
[8:47:43 AM] [DAP] [Info] <== {"seq":742,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.color.transfer = 3\n"},"event":"output"}
[8:47:43 AM] [DAP] [Info] <== {"seq":743,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.crop.height = 720\n"},"event":"output"}
[8:47:43 AM] [DAP] [Info] <== {"seq":744,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.crop.left = 0\n"},"event":"output"}
[8:47:43 AM] [DAP] [Info] <== {"seq":745,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.crop.top = 0\n"},"event":"output"}
[8:47:43 AM] [DAP] [Info] <== {"seq":746,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.crop.width = 1280\n"},"event":"output"}
[8:47:43 AM] [DAP] [Info] ==> {"command":"restart","arguments":{"arguments":{"name":"Dart  (Pixel_3a_API_34_extension_level_7_x86_64)","noDebug":false,"request":"launch","type":"dart","program":"D:\\Flutter\\tintuc\\lib\\main.dart","dartCodeDebugSessionID":"session-4e9e4","projectRootPath":"D:\\Flutter\\tintuc","cwd":"D:\\Flutter\\tintuc","deviceId":"emulator-5554","deviceName":"Pixel_3a_API_34_extension_level_7_x86_64 (android-x64)","toolEnv":{"FLUTTER_HOST":"VSCode","PUB_ENVIRONMENT":"vscode.dart-code","FLUTTER_ROOT":"C:\\src\\flutter"},"sendLogsToClient":false,"sendCustomProgressEvents":true,"allowAnsiColorOutput":true,"additionalProjectPaths":["D:\\Flutter\\tintuc"],"args":[],"vmAdditionalArgs":[],"toolArgs":["-d","emulator-5554","--devtools-server-address","http://127.0.0.1:9100/"],"vmServicePort":0,"dartSdkPath":"C:\\src\\flutter\\bin\\cache\\dart-sdk","vmServiceLogFile":"D:\\Flutter\\tintuc\\logs\\observatory.txt","maxLogLineLength":2000,"dartTestLogFile":"D:\\Flutter\\tintuc\\logs\\dart_test.txt","debugSdkLibraries":true,"debugExternalPackageLibraries":true,"showDartDeveloperLogs":true,"evaluateGettersInDebugViews":true,"showGettersInDebugViews":true,"evaluateToStringInDebugViews":true,"flutterSdkPath":"C:\\src\\flutter","useInspectorNotificationsForWidgetErrors":true,"flutterRunLogFile":"D:\\Flutter\\tintuc\\logs\\flutter_run.txt","flutterTestLogFile":"D:\\Flutter\\tintuc\\logs\\flutter_test.txt","showMemoryUsage":false,"debuggerType":2,"__sessionId":"2c57e826-2048-497d-9c9a-8720a27bdaba"}},"type":"request","seq":20}
[8:47:43 AM] [DAP] [Info] <== {"seq":747,"type":"event","body":{"message":"Hot restarting…","progressId":"hotRestart_4","title":"Flutter"},"event":"dart.progressStart"}
[8:47:44 AM] [DAP] [Info] <== {"seq":748,"type":"event","body":{"category":"stdout","output":"D/BufferPoolAccessor2.0( 6661): bufferpool2 0x735d623b6428 : 0(0 size) total buffers - 0(0 size) used buffers - 22/27 (recycle/alloc) - 5/27 (fetch/transfer)\n"},"event":"output"}
[8:47:44 AM] [DAP] [Info] <== {"seq":749,"type":"event","body":{"category":"stdout","output":"D/BufferPoolAccessor2.0( 6661): evictor expired: 1, evicted: 1\n"},"event":"output"}
[8:47:45 AM] [DAP] [Info] <== {"seq":750,"type":"event","body":{"reason":"exited","threadId":2},"event":"thread"}
[8:47:45 AM] [DAP] [Info] <== {"seq":751,"type":"event","body":{"reason":"started","threadId":3},"event":"thread"}
[8:47:45 AM] [DAP] [Info] <== {"seq":752,"type":"event","body":{"category":"stdout","output":"Restarted application in 1,539ms.\n"},"event":"output"}
[8:47:45 AM] [DAP] [Info] <== {"seq":753,"type":"event","body":{"progressId":"hotRestart_4"},"event":"dart.progressEnd"}
[8:47:45 AM] [DAP] [Info] <== {"seq":754,"type":"response","command":"restart","request_seq":20,"success":true}
[8:47:45 AM] [DAP] [Info] <== {"seq":755,"type":"event","body":{"category":"stdout","output":"D/BufferPoolAccessor2.0( 6661): bufferpool2 0x735d623c9ea8 : 0(0 size) total buffers - 0(0 size) used buffers - 20/30 (recycle/alloc) - 5/25 (fetch/transfer)\n"},"event":"output"}
[8:47:45 AM] [DAP] [Info] <== {"seq":756,"type":"event","body":{"category":"stdout","output":"D/BufferPoolAccessor2.0( 6661): evictor expired: 1, evicted: 1\n"},"event":"output"}
[8:47:45 AM] [DAP] [Info] ==> {"command":"threads","type":"request","seq":21}
[8:47:45 AM] [DAP] [Info] <== {"seq":757,"type":"response","body":{"threads":[{"id":3,"name":"main"}]},"command":"threads","request_seq":21,"success":true}
[8:47:45 AM] [DAP] [Info] <== {"seq":758,"type":"event","body":{"extensionRPC":"ext.ui.window.scheduleFrame","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":759,"type":"event","body":{"extensionRPC":"ext.ui.window.reinitializeShader","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":760,"type":"event","body":{"extensionRPC":"ext.ui.window.impellerEnabled","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":761,"type":"event","body":{"extensionRPC":"ext.dart.io.getHttpEnableTimelineLogging","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":762,"type":"event","body":{"extensionRPC":"ext.dart.io.setHttpEnableTimelineLogging","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":763,"type":"event","body":{"extensionRPC":"ext.dart.io.httpEnableTimelineLogging","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":764,"type":"event","body":{"extensionRPC":"ext.dart.io.getSocketProfile","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":765,"type":"event","body":{"extensionRPC":"ext.dart.io.startSocketProfiling","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":766,"type":"event","body":{"extensionRPC":"ext.dart.io.pauseSocketProfiling","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":767,"type":"event","body":{"extensionRPC":"ext.dart.io.socketProfilingEnabled","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":768,"type":"event","body":{"extensionRPC":"ext.dart.io.clearSocketProfile","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":769,"type":"event","body":{"extensionRPC":"ext.dart.io.getVersion","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":770,"type":"event","body":{"extensionRPC":"ext.dart.io.getHttpProfile","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":771,"type":"event","body":{"extensionRPC":"ext.dart.io.getHttpProfileRequest","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":772,"type":"event","body":{"extensionRPC":"ext.dart.io.clearHttpProfile","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":773,"type":"event","body":{"extensionRPC":"ext.flutter.reassemble","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":774,"type":"event","body":{"extensionRPC":"ext.flutter.exit","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":775,"type":"event","body":{"extensionRPC":"ext.flutter.connectedVmServiceUri","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":776,"type":"event","body":{"extensionRPC":"ext.flutter.activeDevToolsServerAddress","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":777,"type":"event","body":{"extensionRPC":"ext.flutter.platformOverride","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":778,"type":"event","body":{"extensionRPC":"ext.flutter.brightnessOverride","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":779,"type":"event","body":{"extensionRPC":"ext.flutter.timeDilation","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":780,"type":"event","body":{"extensionRPC":"ext.flutter.evict","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":781,"type":"event","body":{"extensionRPC":"ext.flutter.invertOversizedImages","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":782,"type":"event","body":{"extensionRPC":"ext.flutter.debugPaint","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":783,"type":"event","body":{"extensionRPC":"ext.flutter.debugPaintBaselinesEnabled","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":784,"type":"event","body":{"extensionRPC":"ext.flutter.repaintRainbow","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":785,"type":"event","body":{"extensionRPC":"ext.flutter.debugDumpLayerTree","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":786,"type":"event","body":{"extensionRPC":"ext.flutter.debugDisableClipLayers","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":787,"type":"event","body":{"extensionRPC":"ext.flutter.debugDisablePhysicalShapeLayers","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":788,"type":"event","body":{"extensionRPC":"ext.flutter.debugDisableOpacityLayers","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":789,"type":"event","body":{"extensionRPC":"ext.flutter.debugDumpRenderTree","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":790,"type":"event","body":{"extensionRPC":"ext.flutter.debugDumpSemanticsTreeInTraversalOrder","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":791,"type":"event","body":{"extensionRPC":"ext.flutter.debugDumpSemanticsTreeInInverseHitTestOrder","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":792,"type":"event","body":{"extensionRPC":"ext.flutter.profileRenderObjectPaints","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":793,"type":"event","body":{"extensionRPC":"ext.flutter.profileRenderObjectLayouts","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":794,"type":"event","body":{"extensionRPC":"ext.flutter.debugDumpApp","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":795,"type":"event","body":{"extensionRPC":"ext.flutter.debugDumpFocusTree","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":796,"type":"event","body":{"extensionRPC":"ext.flutter.showPerformanceOverlay","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":797,"type":"event","body":{"extensionRPC":"ext.flutter.didSendFirstFrameEvent","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":798,"type":"event","body":{"extensionRPC":"ext.flutter.didSendFirstFrameRasterizedEvent","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":799,"type":"event","body":{"extensionRPC":"ext.flutter.profileWidgetBuilds","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":800,"type":"event","body":{"extensionRPC":"ext.flutter.profileUserWidgetBuilds","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":801,"type":"event","body":{"extensionRPC":"ext.flutter.debugAllowBanner","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":802,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.structuredErrors","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":803,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.show","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":804,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.trackRebuildDirtyWidgets","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":805,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.trackRepaintWidgets","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":806,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.disposeAllGroups","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":807,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.disposeGroup","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":808,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.isWidgetTreeReady","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":809,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.disposeId","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":810,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.setPubRootDirectories","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":811,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.addPubRootDirectories","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":812,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.removePubRootDirectories","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] ==> {"command":"callService","arguments":{"method":"ext.flutter.inspector.setPubRootDirectories","params":{"isolateId":"isolates/5127150632532519","arg0":"file:///D:/Flutter/tintuc"}},"type":"request","seq":22}
[8:47:45 AM] [DAP] [Info] <== {"seq":813,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getPubRootDirectories","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":814,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.setSelectionById","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":815,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getParentChain","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":816,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getProperties","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":817,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getChildren","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":818,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getChildrenSummaryTree","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":819,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getChildrenDetailsSubtree","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":820,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getRootWidget","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":821,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getRootWidgetSummaryTree","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":822,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getRootWidgetSummaryTreeWithPreviews","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":823,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getDetailsSubtree","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":824,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getSelectedWidget","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":825,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getSelectedSummaryWidget","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":826,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.isWidgetCreationTracked","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":827,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.screenshot","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":828,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getLayoutExplorerNode","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":829,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.setFlexFit","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":830,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.setFlexFactor","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":831,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.setFlexProperties","isolateId":"isolates/5127150632532519"},"event":"dart.serviceExtensionAdded"}
[8:47:45 AM] [DAP] [Info] <== {"seq":832,"type":"event","body":{"extension":"ext.flutter.activeDevToolsServerAddress","value":"http://127.0.0.1:9100"},"event":"flutter.serviceExtensionStateChanged"}
[8:47:45 AM] [DAP] [Info] <== {"seq":833,"type":"event","body":{"extension":"ext.flutter.connectedVmServiceUri","value":"http://127.0.0.1:53363/V8WO2g36KlE=/"},"event":"flutter.serviceExtensionStateChanged"}
[8:47:45 AM] [DAP] [Info] <== {"seq":834,"type":"response","body":{"result":null,"type":"_extensionType","method":"ext.flutter.inspector.setPubRootDirectories"},"command":"callService","request_seq":22,"success":true}
[8:47:45 AM] [DAP] [Info] <== {"seq":835,"type":"event","body":{"category":"stdout","output":"D/FRCPlugin( 6661): Sending fetchTimeout: 60\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":836,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-1](id:1a0500000004,api:3,p:6661,c:6661) cancelBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":837,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-1](id:1a0500000004,api:3,p:6661,c:6661) cancelBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":838,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-1](id:1a0500000004,api:3,p:6661,c:6661) cancelBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":839,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-1](id:1a0500000004,api:3,p:6661,c:6661) cancelBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":840,"type":"event","body":{"category":"stdout","output":"I/ExoPlayerImpl( 6661): Release 7526662 [ExoPlayerLib/2.18.7] [emu64xa, sdk_gphone64_x86_64, Google, 34] [goog.exo.core, goog.exo.exoplayer, goog.exo.decoder, goog.exo.datasource, goog.exo.extractor]\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":841,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-1](id:1a0500000004,api:3,p:6661,c:6661) cancelBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":842,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-1](id:1a0500000004,api:3,p:6661,c:6661) cancelBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":843,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-1](id:1a0500000004,api:3,p:6661,c:6661) cancelBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":844,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-1](id:1a0500000004,api:3,p:6661,c:6661) cancelBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":845,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-1](id:1a0500000004,api:3,p:6661,c:6661) cancelBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":846,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-1](id:1a0500000004,api:3,p:6661,c:6661) cancelBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":847,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-1](id:1a0500000004,api:3,p:6661,c:6661) cancelBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":848,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-1](id:1a0500000004,api:3,p:6661,c:6661) dequeueBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":849,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-1](id:1a0500000004,api:3,p:6661,c:6661) cancelBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":850,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-1](id:1a0500000004,api:3,p:6661,c:6661) cancelBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":851,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-1](id:1a0500000004,api:3,p:6661,c:6661) cancelBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":852,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-1](id:1a0500000004,api:3,p:6661,c:6661) cancelBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":853,"type":"event","body":{"category":"stdout","output":"D/MediaCodec( 6661): keep callback message for reclaim\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":854,"type":"event","body":{"category":"stdout","output":"I/CCodecConfig( 6661): query failed after returning 12 values (BAD_INDEX)\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":855,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): c2 config diff is   c2::u32 coded.vui.color.matrix = 1\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":856,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.vui.color.primaries = 1\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":857,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.vui.color.transfer = 3\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":858,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 1342179345.\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":859,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 2415921170.\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":860,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 1610614798.\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":861,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661): [c2.android.aac.decoder#263:1D-Output.Impl[N]] Client returned a buffer it does not own according to our record: 0\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":862,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661): [c2.android.aac.decoder#263:1D-Output.Impl[N]] Client returned a buffer it does not own according to our record: 1\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":863,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661): [c2.android.aac.decoder#263:1D-Output.Impl[N]] Client returned a buffer it does not own according to our record: 2\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":864,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661): [c2.android.aac.decoder#263:1D-Output.Impl[N]] Client returned a buffer it does not own according to our record: 3\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":865,"type":"event","body":{"category":"stdout","output":"D/MediaCodec( 6661): keep callback message for reclaim\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":866,"type":"event","body":{"category":"stdout","output":"I/CCodecConfig( 6661): query failed after returning 20 values (BAD_INDEX)\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":867,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 1342179345.\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":868,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 2415921170.\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":869,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 1610614798.\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":870,"type":"event","body":{"category":"stdout","output":"D/SurfaceUtils( 6661): connecting to surface 0x735d423c0ae0, reason connectToSurface\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":871,"type":"event","body":{"category":"stdout","output":"I/MediaCodec( 6661): [c2.goldfish.h264.decoder] setting surface generation to 6820868\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":872,"type":"event","body":{"category":"stdout","output":"D/SurfaceUtils( 6661): disconnecting from surface 0x735d423c0ae0, reason connectToSurface(reconnect)\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":873,"type":"event","body":{"category":"stdout","output":"D/SurfaceUtils( 6661): connecting to surface 0x735d423c0ae0, reason connectToSurface(reconnect)\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":874,"type":"event","body":{"category":"stdout","output":"D/Codec2-OutputBufferQueue( 6661): remote graphic buffer migration 0/0\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":875,"type":"event","body":{"category":"stdout","output":"D/Codec2Client( 6661): setOutputSurface -- failed to set consumer usage (6/BAD_INDEX)\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":876,"type":"event","body":{"category":"stdout","output":"D/Codec2Client( 6661): setOutputSurface -- generation=6820868 consumer usage=0x900\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":877,"type":"event","body":{"category":"stdout","output":"D/Codec2Client( 6661): Surface configure completed\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":878,"type":"event","body":{"category":"stdout","output":"D/SurfaceUtils( 6661): disconnecting from surface 0x735d423b82a0, reason disconnectFromSurface\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":879,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.goldfish.h264.decoder#777] MediaCodec discarded an unknown buffer\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":880,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.goldfish.h264.decoder#777] MediaCodec discarded an unknown buffer\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":881,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.goldfish.h264.decoder#777] MediaCodec discarded an unknown buffer\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":882,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.goldfish.h264.decoder#777] MediaCodec discarded an unknown buffer\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":883,"type":"event","body":{"category":"stdout","output":"D/SurfaceUtils( 6661): disconnecting from surface 0x735d423c0ae0, reason disconnectFromSurface\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":884,"type":"event","body":{"category":"stdout","output":"D/MediaCodec( 6661): flushMediametrics\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":885,"type":"event","body":{"category":"stdout","output":"I/hw-BpHwBinder( 6661): onLastStrongRef automatically unlinking death recipients\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":886,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.android.aac.decoder#263] MediaCodec discarded an unknown buffer\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":887,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.android.aac.decoder#263] MediaCodec discarded an unknown buffer\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":888,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.android.aac.decoder#263] MediaCodec discarded an unknown buffer\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":889,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.android.aac.decoder#263] MediaCodec discarded an unknown buffer\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":890,"type":"event","body":{"category":"stdout","output":"D/MediaCodec( 6661): flushMediametrics\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":891,"type":"event","body":{"category":"stdout","output":"W/MediaCodec( 6661): no metrics handle found\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":892,"type":"event","body":{"category":"stdout","output":"I/hw-BpHwBinder( 6661): onLastStrongRef automatically unlinking death recipients\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":893,"type":"event","body":{"category":"stdout","output":"I/ExoPlayerImpl( 6661): Init 8c47cbe [ExoPlayerLib/2.18.7] [emu64xa, sdk_gphone64_x86_64, Google, 34]\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":894,"type":"event","body":{"category":"stdout","output":"D/MediaCodec( 6661): flushMediametrics\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":895,"type":"event","body":{"category":"stdout","output":"D/MediaCodec( 6661): flushMediametrics\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":896,"type":"event","body":{"category":"stdout","output":"W/MediaCodec( 6661): no metrics handle found\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":897,"type":"event","body":{"category":"stdout","output":"I/Surface ( 6661): Surface::setFrameRate is deprecated, setFrameRate hint is dropped as destination is not SurfaceFlinger\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":898,"type":"event","body":{"category":"stdout","output":"D/TrafficStats( 6661): tagSocket(148) with statsTag=0xffffffff, statsUid=-1\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":899,"type":"event","body":{"category":"stdout","output":"W/DynamiteModule( 6661): Local module descriptor class for com.google.android.gms.providerinstaller.dynamite not found.\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":900,"type":"event","body":{"category":"stdout","output":"I/DynamiteModule( 6661): Considering local module com.google.android.gms.providerinstaller.dynamite:0 and remote module com.google.android.gms.providerinstaller.dynamite:0\n"},"event":"output"}
[8:47:46 AM] [DAP] [Info] <== {"seq":901,"type":"event","body":{"category":"stdout","output":"W/ProviderInstaller( 6661): Failed to load providerinstaller module: No acceptable module com.google.android.gms.providerinstaller.dynamite found. Local version is 0 and remote version is 0.\n"},"event":"output"}
[8:47:47 AM] [DAP] [Info] <== {"seq":902,"type":"event","body":{"category":"stdout","output":"D/TrafficStats( 6661): tagSocket(144) with statsTag=0xffffffff, statsUid=-1\n"},"event":"output"}
[8:47:47 AM] [DAP] [Info] <== {"seq":903,"type":"event","body":{"category":"stdout","output":"D/EGL_emulation( 6661): app_time_stats: avg=16754.88ms min=43.49ms max=59828.12ms count=4\n"},"event":"output"}
[8:47:47 AM] [DAP] [Info] <== {"seq":904,"type":"event","body":{"reason":"exception","text":"SocketException (SocketException: Failed host lookup: '64fc7845605a026163ae88c0.mockapi.io' (OS Error: No address associated with hostname, errno = 7))","threadId":3},"event":"stopped"}
[8:47:47 AM] [DAP] [Info] ==> {"command":"threads","type":"request","seq":23}
[8:47:47 AM] [DAP] [Info] <== {"seq":905,"type":"response","body":{"threads":[{"id":3,"name":"main"}]},"command":"threads","request_seq":23,"success":true}
[8:47:47 AM] [DAP] [Info] ==> {"command":"stackTrace","arguments":{"threadId":3,"startFrame":0,"levels":1},"type":"request","seq":24}
[8:47:47 AM] [DAP] [Info] <== {"seq":906,"type":"response","body":{"stackFrames":[{"canRestart":false,"column":9,"id":16,"line":520,"name":"_NativeSocket.lookup.<anonymous closure>","source":{"adapterData":{"type":"@Script","id":"libraries/@13069316/scripts/dart%3Aio-patch%2Fsocket_patch.dart/0","fixedId":true,"uri":"dart:io-patch/socket_patch.dart"},"name":"dart:io-patch/socket_patch.dart","origin":"from the SDK","path":"C:\\src\\flutter\\bin\\cache\\pkg\\sky_engine\\lib\\_internal\\vm\\bin\\socket_patch.dart","sourceReference":17}}],"totalFrames":21},"command":"stackTrace","request_seq":24,"success":true}
[8:47:47 AM] [DAP] [Info] ==> {"command":"source","arguments":{"sourceReference":17,"source":{"adapterData":{"type":"@Script","id":"libraries/@13069316/scripts/dart%3Aio-patch%2Fsocket_patch.dart/0","fixedId":true,"uri":"dart:io-patch/socket_patch.dart"},"name":"dart:io-patch/socket_patch.dart","origin":"from the SDK","path":"C:\\src\\flutter\\bin\\cache\\pkg\\sky_engine\\lib\\_internal\\vm\\bin\\socket_patch.dart","sourceReference":17}},"type":"request","seq":25}
[8:47:47 AM] [DAP] [Info] <== {"seq":907,"type":"event","body":{"category":"stdout","output":"D/TrafficStats( 6661): tagSocket(147) with statsTag=0xffffffff, statsUid=-1\n"},"event":"output"}
[8:47:47 AM] [DAP] [Info] <== {"seq":908,"type":"response","body":{"content":"// Copyright (c) 2013, the Dart project authors.  Please see the AUTHORS file\n// for details. All rights reserved. Use of this source code is governed by a\n// BSD-style license that can be found in the LICENSE file.\n\npart of \"common_patch.dart\";\n\n@patch\nclass RawServerSocket {\n  @patch\n  static Future<RawServerSocket> bind(address, int port,\n      {int backlog = 0, bool v6Only = false, bool shared = false}) {\n    return _RawServerSocket.bind(address, port, backlog, v6Only, shared);\n  }\n}\n\n@patch\nclass RawSocket {\n  @patch\n  static Future<RawSocket> connect(dynamic host, int port,\n      {dynamic sourceAddress, int sourcePort = 0, Duration? timeout}) {\n    return _RawSocket.connect(host, port, sourceAddress, sourcePort, timeout);\n  }\n\n  @patch\n  static Future<ConnectionTask<RawSocket>> startConnect(dynamic host, int port,\n      {dynamic sourceAddress, int sourcePort = 0}) {\n    return _RawSocket.startConnect(host, port, sourceAddress, sourcePort);\n  }\n}\n\n@patch\nclass RawSocketOption {\n  static final List<int?> _optionsCache =\n      List<int?>.filled(_RawSocketOptions.values.length, null);\n\n  @patch\n  static int _getOptionValue(int key) {\n    if (key > _RawSocketOptions.values.length) {\n      throw ArgumentError.value(key, 'key');\n    }\n    return _optionsCache[key] ??= _getNativeOptionValue(key);\n  }\n\n  @pragma(\"vm:external-name\", \"RawSocketOption_GetOptionValue\")\n  external static int _getNativeOptionValue(int key);\n}\n\n@patch\nclass InternetAddress {\n  @patch\n  static InternetAddress get loopbackIPv4 {\n    return _InternetAddress.loopbackIPv4;\n  }\n\n  @patch\n  static InternetAddress get loopbackIPv6 {\n    return _InternetAddress.loopbackIPv6;\n  }\n\n  @patch\n  static InternetAddress get anyIPv4 {\n    return _InternetAddress.anyIPv4;\n  }\n\n  @patch\n  static InternetAddress get anyIPv6 {\n    return _InternetAddress.anyIPv6;\n  }\n\n  @patch\n  factory …
[8:47:48 AM] [DAP] [Info] ==> {"command":"stackTrace","arguments":{"threadId":3,"startFrame":1,"levels":19},"type":"request","seq":26}
[8:47:48 AM] [DAP] [Info] <== {"seq":909,"type":"response","body":{"stackFrames":[{"column":0,"id":18,"line":0,"name":"<asynchronous gap>","presentationHint":"label"},{"canRestart":false,"column":29,"id":19,"line":633,"name":"_NativeSocket.staggeredLookup.<anonymous closure>.lookupAddresses","source":{"adapterData":{"type":"@Script","id":"libraries/@13069316/scripts/dart%3Aio-patch%2Fsocket_patch.dart/0","fixedId":true,"uri":"dart:io-patch/socket_patch.dart"},"name":"dart:io-patch/socket_patch.dart","origin":"from the SDK","path":"C:\\src\\flutter\\bin\\cache\\pkg\\sky_engine\\lib\\_internal\\vm\\bin\\socket_patch.dart","sourceReference":21}},{"column":0,"id":20,"line":0,"name":"<asynchronous gap>","presentationHint":"label"}],"totalFrames":4},"command":"stackTrace","request_seq":26,"success":true}
[8:47:48 AM] [DAP] [Info] <== {"seq":910,"type":"event","body":{"category":"stdout","output":"I/DMCodecAdapterFactory( 6661): Creating an asynchronous MediaCodec adapter for track type video\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":911,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): allocate(c2.goldfish.h264.decoder)\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":912,"type":"event","body":{"category":"stdout","output":"I/CCodec  ( 6661): setting up 'default' as default (vendor) store\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":913,"type":"event","body":{"category":"stdout","output":"I/CCodec  ( 6661): Created component [c2.goldfish.h264.decoder]\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":914,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): read media type: video/avc\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":915,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: algo.buffers.max-count.values\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":916,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: output.subscribed-indices.values\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":917,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: input.buffers.allocator-ids.values\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":918,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: output.buffers.allocator-ids.values\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":919,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: algo.buffers.allocator-ids.values\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":920,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: output.buffers.pool-ids.values\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":921,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: algo.buffers.pool-ids.values\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":922,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): ignored struct field coded.color-format.locations\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":923,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): ignoring local param raw.size (0xd2001800) as it is already supported\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":924,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): ignoring local param default.color (0x5200180b) as it is already supported\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":925,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): ignored struct field raw.hdr-static-info.mastering\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":926,"type":"event","body":{"category":"stdout","output":"I/CCodecConfig( 6661): query failed after returning 12 values (BAD_INDEX)\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":927,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): c2 config diff is Dict {\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":928,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.pl.level = 20496\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":929,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.pl.profile = 20481\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":930,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.vui.color.matrix = 0\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":931,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.vui.color.primaries = 0\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":932,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.vui.color.range = 2\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":933,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.vui.color.transfer = 0\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":934,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 default.color.matrix = 0\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":935,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 default.color.primaries = 0\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":936,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 default.color.range = 0\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":937,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 default.color.transfer = 0\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":938,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 input.buffers.max-size.value = 6291456\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":939,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 input.delay.value = 0\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":940,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   string input.media-type.value = \"video/avc\"\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":941,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 output.delay.value = 8\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":942,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   string output.media-type.value = \"video/raw\"\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":943,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.color.matrix = 0\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":944,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.color.primaries = 0\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":945,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.color.range = 2\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":946,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.color.transfer = 0\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":947,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.max-size.height = 240\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":948,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.max-size.width = 320\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":949,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.pixel-format.value = 35\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":950,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::i32 raw.rotation.flip = 0\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":951,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::i32 raw.rotation.value = 0\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":952,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.sar.height = 1\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":953,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.sar.width = 1\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":954,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.size.height = 240\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":955,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.size.width = 320\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":956,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2:\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":957,"type":"event","body":{"category":"stdout","output":"W/ColorUtils( 6661): expected specified color aspects (2:0:0:0)\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":958,"type":"event","body":{"category":"stdout","output":"I/MediaCodec( 6661): MediaCodec will operate in async mode\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":959,"type":"event","body":{"category":"stdout","output":"D/MediaCodec( 6661): flushMediametrics\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":960,"type":"event","body":{"category":"stdout","output":"D/SurfaceUtils( 6661): connecting to surface 0x735d423c4f00, reason connectToSurface\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":961,"type":"event","body":{"category":"stdout","output":"I/MediaCodec( 6661): [c2.goldfish.h264.decoder] setting surface generation to 6820869\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":962,"type":"event","body":{"category":"stdout","output":"D/SurfaceUtils( 6661): disconnecting from surface 0x735d423c4f00, reason connectToSurface(reconnect)\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":963,"type":"event","body":{"category":"stdout","output":"D/SurfaceUtils( 6661): connecting to surface 0x735d423c4f00, reason connectToSurface(reconnect)\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":964,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): [c2.goldfish.h264.decoder] buffers are bound to CCodec for this session\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":965,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): no c2 equivalents for csd-1\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":966,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): no c2 equivalents for log-session-id\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":967,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): no c2 equivalents for native-window\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":968,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): no c2 equivalents for flags\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":969,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): config failed => CORRUPTED\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":970,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): c2 config diff is   c2::u32 raw.max-size.height = 720\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":971,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.max-size.width = 1280\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":972,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.size.height = 720\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":973,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.size.width = 1280\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":974,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 1107298332.\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":975,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): client requested max input size 219813, which is smaller than what component recommended (6291456); overriding with component recommendation.\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":976,"type":"event","body":{"category":"stdout","output":"W/CCodec  ( 6661): This behavior is subject to change. It is recommended that app developers double check whether the requested max input size is in reasonable range.\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":977,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): encoding statistics level = 0\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":978,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): setup formats input: AMessage(what = 0x00000000) = {\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":979,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t height = 720\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":980,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t level = 65536\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":981,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t max-input-size = 6291456\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":982,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   string mime = \"video/avc\"\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":983,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t profile = 65536\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":984,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t width = 1280\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":985,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   Rect crop(0, 0, 1279, 719)\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":986,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): }\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":987,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): setup formats output: AMessage(what = 0x00000000) = {\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":988,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t android._color-format = 2135033992\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":989,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t android._video-scaling = 1\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":990,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t rotation-degrees = 0\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":991,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t color-standard = 1\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":992,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t color-range = 2\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":993,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t color-transfer = 3\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":994,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t sar-height = 1\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":995,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t sar-width = 1\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":996,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   Rect crop(0, 0, 1279, 719)\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":997,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t width = 1280\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":998,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t height = 720\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":999,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t max-height = 720\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":1000,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t max-width = 1280\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":1001,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   string mime = \"video/raw\"\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":1002,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t android._dataspace = 260\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":1003,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t color-format = 2130708361\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":1004,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): }\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":1005,"type":"event","body":{"category":"stdout","output":"I/CCodecConfig( 6661): query failed after returning 12 values (BAD_INDEX)\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":1006,"type":"event","body":{"category":"stdout","output":"D/MediaCodec( 6661): keep callback message for reclaim\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":1007,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 1342179345.\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":1008,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 2415921170.\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":1009,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 1610614798.\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":1010,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 2684356609.\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":1011,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.goldfish.h264.decoder#838] Created input block pool with allocatorID 16 => poolID 21 - OK (0)\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":1012,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.goldfish.h264.decoder#838] Query output surface allocator returned 0 params => BAD_INDEX (6)\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":1013,"type":"event","body":{"category":"stdout","output":"I/CCodecBufferChannel( 6661): [c2.goldfish.h264.decoder#838] Created output block pool with allocatorID 18 => poolID 19 - OK\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":1014,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.goldfish.h264.decoder#838] Configured output block pool ids 19 => OK\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":1015,"type":"event","body":{"category":"stdout","output":"D/Codec2-OutputBufferQueue( 6661): remote graphic buffer migration 0/0\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":1016,"type":"event","body":{"category":"stdout","output":"D/Codec2Client( 6661): setOutputSurface -- failed to set consumer usage (6/BAD_INDEX)\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":1017,"type":"event","body":{"category":"stdout","output":"D/Codec2Client( 6661): setOutputSurface -- generation=6820869 consumer usage=0x900\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":1018,"type":"event","body":{"category":"stdout","output":"D/Codec2Client( 6661): Surface configure completed\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":1019,"type":"event","body":{"category":"stdout","output":"D/BufferPoolAccessor2.0( 6661): Destruction - bufferpool2 0x735d623b6428 cached: 0/0M, 0/0% in use; allocs: 27, 81% recycled; transfers: 27, 81% unfetched\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":1020,"type":"event","body":{"category":"stdout","output":"I/DMCodecAdapterFactory( 6661): Creating an asynchronous MediaCodec adapter for track type audio\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":1021,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): allocate(c2.android.aac.decoder)\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":1022,"type":"event","body":{"category":"stdout","output":"I/CCodec  ( 6661): setting up 'default' as default (vendor) store\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":1023,"type":"event","body":{"category":"stdout","output":"I/CCodec  ( 6661): Created component [c2.android.aac.decoder]\n"},"event":"output"}
[8:47:48 AM] [DAP] [Info] <== {"seq":1024,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): read media type: audio/mp4a-latm\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1025,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: algo.buffers.max-count.values\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1026,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: output.subscribed-indices.values\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1027,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: input.buffers.allocator-ids.values\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1028,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: output.buffers.allocator-ids.values\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1029,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: algo.buffers.allocator-ids.values\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1030,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: output.buffers.pool-ids.values\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1031,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: algo.buffers.pool-ids.values\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1032,"type":"event","body":{"category":"stdout","output":"I/CCodecConfig( 6661): query failed after returning 20 values (BAD_INDEX)\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1033,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): c2 config diff is Dict {\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1034,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.aac-packaging.value = 0\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1035,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.bitrate.value = 64000\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1036,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.pl.level = 0\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1037,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.pl.profile = 8192\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1038,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::i32 coding.drc.album-mode.value = 0\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1039,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::float coding.drc.attenuation-factor.value = 1\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1040,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::float coding.drc.boost-factor.value = 1\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1041,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::i32 coding.drc.compression-mode.value = 3\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1042,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::i32 coding.drc.effect-type.value = 3\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1043,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::float coding.drc.encoded-level.value = 0.25\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1044,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::float coding.drc.reference-level.value = -16\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1045,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 input.buffers.max-size.value = 8192\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1046,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 input.delay.value = 0\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1047,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   string input.media-type.value = \"audio/mp4a-latm\"\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1048,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 output.delay.value = 2\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1049,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::float output.drc.output-loudness.value = 0.25\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1050,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   string output.media-type.value = \"audio/raw\"\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1051,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.channel-count.value = 1\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1052,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.channel-mask.value = 0\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1053,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.max-channel-count.value = 8\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1054,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.sample-rate.value = 44100\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1055,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): }\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1056,"type":"event","body":{"category":"stdout","output":"I/MediaCodec( 6661): MediaCodec will operate in async mode\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1057,"type":"event","body":{"category":"stdout","output":"D/MediaCodec( 6661): flushMediametrics\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1058,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): [c2.android.aac.decoder] buffers are bound to CCodec for this session\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1059,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): no c2 equivalents for log-session-id\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1060,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): no c2 equivalents for flags\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1061,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): config failed => CORRUPTED\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1062,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): c2 config diff is   c2::u32 raw.channel-count.value = 2\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1063,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 1107298332.\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1064,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): client requested max input size 623, which is smaller than what component recommended (8192); overriding with component recommendation.\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1065,"type":"event","body":{"category":"stdout","output":"W/CCodec  ( 6661): This behavior is subject to change. It is recommended that app developers double check whether the requested max input size is in reasonable range.\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1066,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): encoding statistics level = 0\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1067,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): setup formats input: AMessage(what = 0x00000000) = {\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1068,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-drc-album-mode = 0\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1069,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-drc-boost-level = 127\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1070,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-drc-cut-level = 127\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1071,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-drc-effect-type = 3\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1072,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-encoded-target-level = -1\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1073,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-max-output-channel_count = 8\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1074,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-target-ref-level = 64\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1075,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t bitrate = 64000\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1076,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t channel-count = 2\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1077,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t channel-mask = 0\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1078,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t level = 0\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1079,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t max-input-size = 8192\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1080,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t max-output-channel-count = 8\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1081,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   string mime = \"audio/mp4a-latm\"\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1082,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t profile = 2\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1083,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t sample-rate = 44100\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1084,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): }\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1085,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): setup formats output: AMessage(what = 0x00000000) = {\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1086,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-drc-album-mode = 0\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1087,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-drc-boost-level = 127\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1088,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-drc-cut-level = 127\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1089,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-drc-effect-type = 3\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1090,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-drc-output-loudness = -1\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1091,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-encoded-target-level = -1\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1092,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-max-output-channel_count = 8\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1093,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-target-ref-level = 64\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1094,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t channel-count = 2\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1095,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t channel-mask = 0\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1096,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t max-output-channel-count = 8\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1097,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   string mime = \"audio/raw\"\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1098,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t sample-rate = 44100\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1099,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t android._config-pcm-encoding = 2\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1100,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): }\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1101,"type":"event","body":{"category":"stdout","output":"I/CCodecConfig( 6661): query failed after returning 20 values (BAD_INDEX)\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1102,"type":"event","body":{"category":"stdout","output":"D/MediaCodec( 6661): keep callback message for reclaim\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1103,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 1342179345.\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1104,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 2415921170.\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1105,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 1610614798.\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1106,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.android.aac.decoder#245] Created input block pool with allocatorID 16 => poolID 22 - OK (0)\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1107,"type":"event","body":{"category":"stdout","output":"I/CCodecBufferChannel( 6661): [c2.android.aac.decoder#245] Created output block pool with allocatorID 16 => poolID 29 - OK\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1108,"type":"event","body":{"category":"stdout","output":"D/BufferPoolAccessor2.0( 6661): Destruction - bufferpool2 0x735d623c9ea8 cached: 0/0M, 0/0% in use; allocs: 30, 67% recycled; transfers: 25, 80% unfetched\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1109,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.android.aac.decoder#245] Configured output block pool ids 29 => OK\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1110,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): c2 config diff is   c2::u32 raw.channel-mask.value = 12\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1111,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661): [c2.android.aac.decoder#245:Output[N]] popFromStashAndRegister: at 1000000000000us, output format changed to AMessage(what = 0x00000000) = {\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1112,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t aac-drc-album-mode = 0\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1113,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t aac-drc-boost-level = 127\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1114,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t aac-drc-cut-level = 127\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1115,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t aac-drc-effect-type = 3\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1116,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t aac-drc-output-loudness = -1\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1117,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t aac-encoded-target-level = -1\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1118,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t aac-max-output-channel_count = 8\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1119,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t aac-target-ref-level = 64\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1120,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t channel-count = 2\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1121,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t channel-mask = 12\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1122,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t max-output-channel-count = 8\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1123,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   string mime = \"audio/raw\"\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1124,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t sample-rate = 44100\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1125,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t android._config-pcm-encoding = 2\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1126,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661): }\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] ==> {"command":"restart","arguments":{"arguments":{"name":"Dart  (Pixel_3a_API_34_extension_level_7_x86_64)","noDebug":false,"request":"launch","type":"dart","program":"D:\\Flutter\\tintuc\\lib\\main.dart","dartCodeDebugSessionID":"session-4e9e4","projectRootPath":"D:\\Flutter\\tintuc","cwd":"D:\\Flutter\\tintuc","deviceId":"emulator-5554","deviceName":"Pixel_3a_API_34_extension_level_7_x86_64 (android-x64)","toolEnv":{"FLUTTER_HOST":"VSCode","PUB_ENVIRONMENT":"vscode.dart-code","FLUTTER_ROOT":"C:\\src\\flutter"},"sendLogsToClient":false,"sendCustomProgressEvents":true,"allowAnsiColorOutput":true,"additionalProjectPaths":["D:\\Flutter\\tintuc"],"args":[],"vmAdditionalArgs":[],"toolArgs":["-d","emulator-5554","--devtools-server-address","http://127.0.0.1:9100/"],"vmServicePort":0,"dartSdkPath":"C:\\src\\flutter\\bin\\cache\\dart-sdk","vmServiceLogFile":"D:\\Flutter\\tintuc\\logs\\observatory.txt","maxLogLineLength":2000,"dartTestLogFile":"D:\\Flutter\\tintuc\\logs\\dart_test.txt","debugSdkLibraries":true,"debugExternalPackageLibraries":true,"showDartDeveloperLogs":true,"evaluateGettersInDebugViews":true,"showGettersInDebugViews":true,"evaluateToStringInDebugViews":true,"flutterSdkPath":"C:\\src\\flutter","useInspectorNotificationsForWidgetErrors":true,"flutterRunLogFile":"D:\\Flutter\\tintuc\\logs\\flutter_run.txt","flutterTestLogFile":"D:\\Flutter\\tintuc\\logs\\flutter_test.txt","showMemoryUsage":false,"debuggerType":2,"__sessionId":"2c57e826-2048-497d-9c9a-8720a27bdaba"}},"type":"request","seq":27}
[8:47:49 AM] [DAP] [Info] <== {"seq":1127,"type":"event","body":{"message":"Hot restarting…","progressId":"hotRestart_5","title":"Flutter"},"event":"dart.progressStart"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1128,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): c2 config diff is   c2::u32 raw.color.matrix = 1\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1129,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.color.primaries = 1\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1130,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.color.transfer = 3\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1131,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.crop.height = 720\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1132,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.crop.left = 0\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1133,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.crop.top = 0\n"},"event":"output"}
[8:47:49 AM] [DAP] [Info] <== {"seq":1134,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.crop.width = 1280\n"},"event":"output"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1135,"type":"event","body":{"reason":"exited","threadId":3},"event":"thread"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1136,"type":"event","body":{"reason":"started","threadId":4},"event":"thread"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1137,"type":"event","body":{"category":"stdout","output":"Restarted application in 1,631ms.\n"},"event":"output"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1138,"type":"event","body":{"progressId":"hotRestart_5"},"event":"dart.progressEnd"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1139,"type":"response","command":"restart","request_seq":27,"success":true}
[8:47:51 AM] [DAP] [Info] <== {"seq":1140,"type":"event","body":{"extensionRPC":"ext.ui.window.scheduleFrame","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1141,"type":"event","body":{"extensionRPC":"ext.ui.window.reinitializeShader","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1142,"type":"event","body":{"extensionRPC":"ext.ui.window.impellerEnabled","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1143,"type":"event","body":{"extensionRPC":"ext.dart.io.getHttpEnableTimelineLogging","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1144,"type":"event","body":{"extensionRPC":"ext.dart.io.setHttpEnableTimelineLogging","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1145,"type":"event","body":{"extensionRPC":"ext.dart.io.httpEnableTimelineLogging","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] ==> {"command":"threads","type":"request","seq":28}
[8:47:51 AM] [DAP] [Info] <== {"seq":1146,"type":"event","body":{"extensionRPC":"ext.dart.io.getSocketProfile","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1147,"type":"event","body":{"extensionRPC":"ext.dart.io.startSocketProfiling","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1148,"type":"event","body":{"extensionRPC":"ext.dart.io.pauseSocketProfiling","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1149,"type":"event","body":{"extensionRPC":"ext.dart.io.socketProfilingEnabled","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1150,"type":"event","body":{"extensionRPC":"ext.dart.io.clearSocketProfile","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1151,"type":"event","body":{"extensionRPC":"ext.dart.io.getVersion","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1152,"type":"event","body":{"extensionRPC":"ext.dart.io.getHttpProfile","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1153,"type":"event","body":{"extensionRPC":"ext.dart.io.getHttpProfileRequest","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1154,"type":"event","body":{"extensionRPC":"ext.dart.io.clearHttpProfile","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1155,"type":"response","body":{"threads":[{"id":4,"name":"main"}]},"command":"threads","request_seq":28,"success":true}
[8:47:51 AM] [DAP] [Info] <== {"seq":1156,"type":"event","body":{"extensionRPC":"ext.flutter.reassemble","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1157,"type":"event","body":{"extensionRPC":"ext.flutter.exit","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1158,"type":"event","body":{"extensionRPC":"ext.flutter.connectedVmServiceUri","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1159,"type":"event","body":{"extensionRPC":"ext.flutter.activeDevToolsServerAddress","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1160,"type":"event","body":{"extensionRPC":"ext.flutter.platformOverride","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1161,"type":"event","body":{"extensionRPC":"ext.flutter.brightnessOverride","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1162,"type":"event","body":{"extensionRPC":"ext.flutter.timeDilation","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1163,"type":"event","body":{"extensionRPC":"ext.flutter.evict","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1164,"type":"event","body":{"extensionRPC":"ext.flutter.invertOversizedImages","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1165,"type":"event","body":{"extensionRPC":"ext.flutter.debugPaint","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1166,"type":"event","body":{"extensionRPC":"ext.flutter.debugPaintBaselinesEnabled","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1167,"type":"event","body":{"extensionRPC":"ext.flutter.repaintRainbow","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1168,"type":"event","body":{"extensionRPC":"ext.flutter.debugDumpLayerTree","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1169,"type":"event","body":{"extensionRPC":"ext.flutter.debugDisableClipLayers","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1170,"type":"event","body":{"extensionRPC":"ext.flutter.debugDisablePhysicalShapeLayers","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1171,"type":"event","body":{"extensionRPC":"ext.flutter.debugDisableOpacityLayers","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1172,"type":"event","body":{"extensionRPC":"ext.flutter.debugDumpRenderTree","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1173,"type":"event","body":{"extensionRPC":"ext.flutter.debugDumpSemanticsTreeInTraversalOrder","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1174,"type":"event","body":{"extensionRPC":"ext.flutter.debugDumpSemanticsTreeInInverseHitTestOrder","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1175,"type":"event","body":{"extensionRPC":"ext.flutter.profileRenderObjectPaints","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1176,"type":"event","body":{"extensionRPC":"ext.flutter.profileRenderObjectLayouts","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1177,"type":"event","body":{"extensionRPC":"ext.flutter.debugDumpApp","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1178,"type":"event","body":{"extensionRPC":"ext.flutter.debugDumpFocusTree","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1179,"type":"event","body":{"extensionRPC":"ext.flutter.showPerformanceOverlay","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1180,"type":"event","body":{"extensionRPC":"ext.flutter.didSendFirstFrameEvent","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1181,"type":"event","body":{"extensionRPC":"ext.flutter.didSendFirstFrameRasterizedEvent","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1182,"type":"event","body":{"extensionRPC":"ext.flutter.profileWidgetBuilds","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1183,"type":"event","body":{"extensionRPC":"ext.flutter.profileUserWidgetBuilds","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1184,"type":"event","body":{"extensionRPC":"ext.flutter.debugAllowBanner","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1185,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.structuredErrors","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1186,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.show","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1187,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.trackRebuildDirtyWidgets","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1188,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.trackRepaintWidgets","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1189,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.disposeAllGroups","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1190,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.disposeGroup","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1191,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.isWidgetTreeReady","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1192,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.disposeId","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1193,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.setPubRootDirectories","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1194,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.addPubRootDirectories","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1195,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.removePubRootDirectories","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] ==> {"command":"callService","arguments":{"method":"ext.flutter.inspector.setPubRootDirectories","params":{"isolateId":"isolates/7027530579045063","arg0":"file:///D:/Flutter/tintuc"}},"type":"request","seq":29}
[8:47:51 AM] [DAP] [Info] <== {"seq":1196,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getPubRootDirectories","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1197,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.setSelectionById","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1198,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getParentChain","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1199,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getProperties","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1200,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getChildren","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1201,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getChildrenSummaryTree","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1202,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getChildrenDetailsSubtree","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1203,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getRootWidget","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1204,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getRootWidgetSummaryTree","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1205,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getRootWidgetSummaryTreeWithPreviews","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1206,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getDetailsSubtree","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1207,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getSelectedWidget","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1208,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getSelectedSummaryWidget","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1209,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.isWidgetCreationTracked","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1210,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.screenshot","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1211,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.getLayoutExplorerNode","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1212,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.setFlexFit","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1213,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.setFlexFactor","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1214,"type":"event","body":{"extensionRPC":"ext.flutter.inspector.setFlexProperties","isolateId":"isolates/7027530579045063"},"event":"dart.serviceExtensionAdded"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1215,"type":"event","body":{"extension":"ext.flutter.activeDevToolsServerAddress","value":"http://127.0.0.1:9100"},"event":"flutter.serviceExtensionStateChanged"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1216,"type":"event","body":{"extension":"ext.flutter.connectedVmServiceUri","value":"http://127.0.0.1:53363/V8WO2g36KlE=/"},"event":"flutter.serviceExtensionStateChanged"}
[8:47:51 AM] [DAP] [Info] <== {"seq":1217,"type":"response","body":{"result":null,"type":"_extensionType","method":"ext.flutter.inspector.setPubRootDirectories"},"command":"callService","request_seq":29,"success":true}
[8:47:51 AM] [DAP] [Info] <== {"seq":1218,"type":"event","body":{"category":"stdout","output":"D/FRCPlugin( 6661): Sending fetchTimeout: 60\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1219,"type":"event","body":{"category":"stdout","output":"D/BufferPoolAccessor2.0( 6661): bufferpool2 0x735d623bb9b8 : 0(0 size) total buffers - 0(0 size) used buffers - 27/32 (recycle/alloc) - 5/27 (fetch/transfer)\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1220,"type":"event","body":{"category":"stdout","output":"D/BufferPoolAccessor2.0( 6661): bufferpool2 0x735d623d0218 : 0(0 size) total buffers - 0(0 size) used buffers - 22/27 (recycle/alloc) - 5/27 (fetch/transfer)\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1221,"type":"event","body":{"category":"stdout","output":"D/BufferPoolAccessor2.0( 6661): evictor expired: 2, evicted: 2\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1222,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-2](id:1a0500000006,api:3,p:6661,c:6661) cancelBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1223,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-2](id:1a0500000006,api:3,p:6661,c:6661) cancelBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1224,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-2](id:1a0500000006,api:3,p:6661,c:6661) cancelBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1225,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-2](id:1a0500000006,api:3,p:6661,c:6661) cancelBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1226,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-2](id:1a0500000006,api:3,p:6661,c:6661) cancelBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1227,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-2](id:1a0500000006,api:3,p:6661,c:6661) cancelBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1228,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-2](id:1a0500000006,api:3,p:6661,c:6661) cancelBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1229,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-2](id:1a0500000006,api:3,p:6661,c:6661) cancelBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1230,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-2](id:1a0500000006,api:3,p:6661,c:6661) cancelBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1231,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-2](id:1a0500000006,api:3,p:6661,c:6661) cancelBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1232,"type":"event","body":{"category":"stdout","output":"I/ExoPlayerImpl( 6661): Release 8c47cbe [ExoPlayerLib/2.18.7] [emu64xa, sdk_gphone64_x86_64, Google, 34] [goog.exo.core, goog.exo.exoplayer, goog.exo.decoder, goog.exo.datasource, goog.exo.extractor]\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1233,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-2](id:1a0500000006,api:3,p:6661,c:6661) cancelBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1234,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-2](id:1a0500000006,api:3,p:6661,c:6661) cancelBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1235,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-2](id:1a0500000006,api:3,p:6661,c:6661) cancelBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1236,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-2](id:1a0500000006,api:3,p:6661,c:6661) dequeueBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1237,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-2](id:1a0500000006,api:3,p:6661,c:6661) cancelBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1238,"type":"event","body":{"category":"stdout","output":"E/BufferQueueProducer( 6661): [SurfaceTexture-0-6661-2](id:1a0500000006,api:3,p:6661,c:6661) cancelBuffer: BufferQueue has been abandoned\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1239,"type":"event","body":{"category":"stdout","output":"D/MediaCodec( 6661): keep callback message for reclaim\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1240,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.goldfish.h264.decoder#838] flushed work; ignored.\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1241,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.goldfish.h264.decoder#838] Discard frames from previous generation.\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1242,"type":"event","body":{"category":"stdout","output":"I/CCodecConfig( 6661): query failed after returning 12 values (BAD_INDEX)\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1243,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): c2 config diff is   c2::u32 coded.vui.color.matrix = 1\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1244,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.vui.color.primaries = 1\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1245,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.vui.color.transfer = 3\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1246,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 1342179345.\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1247,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 2415921170.\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1248,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 1610614798.\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1249,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661): [c2.android.aac.decoder#245:1D-Output.Impl[N]] Client returned a buffer it does not own according to our record: 0\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1250,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661): [c2.android.aac.decoder#245:1D-Output.Impl[N]] Client returned a buffer it does not own according to our record: 1\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1251,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661): [c2.android.aac.decoder#245:1D-Output.Impl[N]] Client returned a buffer it does not own according to our record: 2\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1252,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661): [c2.android.aac.decoder#245:1D-Output.Impl[N]] Client returned a buffer it does not own according to our record: 3\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1253,"type":"event","body":{"category":"stdout","output":"D/MediaCodec( 6661): keep callback message for reclaim\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1254,"type":"event","body":{"category":"stdout","output":"I/CCodecConfig( 6661): query failed after returning 20 values (BAD_INDEX)\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1255,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 1342179345.\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1256,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 2415921170.\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1257,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 1610614798.\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1258,"type":"event","body":{"category":"stdout","output":"D/SurfaceUtils( 6661): connecting to surface 0x735d423bc6c0, reason connectToSurface\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1259,"type":"event","body":{"category":"stdout","output":"I/MediaCodec( 6661): [c2.goldfish.h264.decoder] setting surface generation to 6820870\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1260,"type":"event","body":{"category":"stdout","output":"D/SurfaceUtils( 6661): disconnecting from surface 0x735d423bc6c0, reason connectToSurface(reconnect)\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1261,"type":"event","body":{"category":"stdout","output":"D/SurfaceUtils( 6661): connecting to surface 0x735d423bc6c0, reason connectToSurface(reconnect)\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1262,"type":"event","body":{"category":"stdout","output":"D/Codec2-OutputBufferQueue( 6661): remote graphic buffer migration 0/0\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1263,"type":"event","body":{"category":"stdout","output":"D/Codec2Client( 6661): setOutputSurface -- failed to set consumer usage (6/BAD_INDEX)\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1264,"type":"event","body":{"category":"stdout","output":"D/Codec2Client( 6661): setOutputSurface -- generation=6820870 consumer usage=0x900\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1265,"type":"event","body":{"category":"stdout","output":"D/Codec2Client( 6661): Surface configure completed\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1266,"type":"event","body":{"category":"stdout","output":"D/SurfaceUtils( 6661): disconnecting from surface 0x735d423c4f00, reason disconnectFromSurface\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1267,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.goldfish.h264.decoder#838] MediaCodec discarded an unknown buffer\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1268,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.goldfish.h264.decoder#838] MediaCodec discarded an unknown buffer\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1269,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.goldfish.h264.decoder#838] MediaCodec discarded an unknown buffer\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1270,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.goldfish.h264.decoder#838] MediaCodec discarded an unknown buffer\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1271,"type":"event","body":{"category":"stdout","output":"I/hw-BpHwBinder( 6661): onLastStrongRef automatically unlinking death recipients\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1272,"type":"event","body":{"category":"stdout","output":"D/SurfaceUtils( 6661): disconnecting from surface 0x735d423bc6c0, reason disconnectFromSurface\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1273,"type":"event","body":{"category":"stdout","output":"D/MediaCodec( 6661): flushMediametrics\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1274,"type":"event","body":{"category":"stdout","output":"D/MediaCodec( 6661): flushMediametrics\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1275,"type":"event","body":{"category":"stdout","output":"W/MediaCodec( 6661): no metrics handle found\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1276,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.android.aac.decoder#245] MediaCodec discarded an unknown buffer\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1277,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.android.aac.decoder#245] MediaCodec discarded an unknown buffer\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1278,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.android.aac.decoder#245] MediaCodec discarded an unknown buffer\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1279,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.android.aac.decoder#245] MediaCodec discarded an unknown buffer\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1280,"type":"event","body":{"category":"stdout","output":"I/hw-BpHwBinder( 6661): onLastStrongRef automatically unlinking death recipients\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1281,"type":"event","body":{"category":"stdout","output":"D/MediaCodec( 6661): flushMediametrics\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1282,"type":"event","body":{"category":"stdout","output":"D/MediaCodec( 6661): flushMediametrics\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1283,"type":"event","body":{"category":"stdout","output":"W/MediaCodec( 6661): no metrics handle found\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1284,"type":"event","body":{"category":"stdout","output":"I/ExoPlayerImpl( 6661): Init b3dbd0 [ExoPlayerLib/2.18.7] [emu64xa, sdk_gphone64_x86_64, Google, 34]\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1285,"type":"event","body":{"category":"stdout","output":"I/Surface ( 6661): Surface::setFrameRate is deprecated, setFrameRate hint is dropped as destination is not SurfaceFlinger\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1286,"type":"event","body":{"category":"stdout","output":"D/TrafficStats( 6661): tagSocket(141) with statsTag=0xffffffff, statsUid=-1\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1287,"type":"event","body":{"category":"stdout","output":"W/DynamiteModule( 6661): Local module descriptor class for com.google.android.gms.providerinstaller.dynamite not found.\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1288,"type":"event","body":{"category":"stdout","output":"I/DynamiteModule( 6661): Considering local module com.google.android.gms.providerinstaller.dynamite:0 and remote module com.google.android.gms.providerinstaller.dynamite:0\n"},"event":"output"}
[8:47:52 AM] [DAP] [Info] <== {"seq":1289,"type":"event","body":{"category":"stdout","output":"W/ProviderInstaller( 6661): Failed to load providerinstaller module: No acceptable module com.google.android.gms.providerinstaller.dynamite found. Local version is 0 and remote version is 0.\n"},"event":"output"}
[8:47:53 AM] [DAP] [Info] <== {"seq":1290,"type":"event","body":{"category":"stdout","output":"D/TrafficStats( 6661): tagSocket(150) with statsTag=0xffffffff, statsUid=-1\n"},"event":"output"}
[8:47:53 AM] [DAP] [Info] <== {"seq":1291,"type":"event","body":{"category":"stdout","output":"D/EGL_emulation( 6661): app_time_stats: avg=2005.18ms min=37.66ms max=5731.92ms count=3\n"},"event":"output"}
[8:47:53 AM] [DAP] [Info] <== {"seq":1292,"type":"event","body":{"category":"stdout","output":"D/TrafficStats( 6661): tagSocket(141) with statsTag=0xffffffff, statsUid=-1\n"},"event":"output"}
[8:47:53 AM] [DAP] [Info] <== {"seq":1293,"type":"event","body":{"reason":"exception","text":"SocketException (SocketException: Failed host lookup: '64fc7845605a026163ae88c0.mockapi.io' (OS Error: No address associated with hostname, errno = 7))","threadId":4},"event":"stopped"}
[8:47:53 AM] [DAP] [Info] ==> {"command":"threads","type":"request","seq":30}
[8:47:53 AM] [DAP] [Info] <== {"seq":1294,"type":"response","body":{"threads":[{"id":4,"name":"main"}]},"command":"threads","request_seq":30,"success":true}
[8:47:53 AM] [DAP] [Info] ==> {"command":"stackTrace","arguments":{"threadId":4,"startFrame":0,"levels":1},"type":"request","seq":31}
[8:47:53 AM] [DAP] [Info] <== {"seq":1295,"type":"response","body":{"stackFrames":[{"canRestart":false,"column":9,"id":23,"line":520,"name":"_NativeSocket.lookup.<anonymous closure>","source":{"adapterData":{"type":"@Script","id":"libraries/@13069316/scripts/dart%3Aio-patch%2Fsocket_patch.dart/0","fixedId":true,"uri":"dart:io-patch/socket_patch.dart"},"name":"dart:io-patch/socket_patch.dart","origin":"from the SDK","path":"C:\\src\\flutter\\bin\\cache\\pkg\\sky_engine\\lib\\_internal\\vm\\bin\\socket_patch.dart","sourceReference":24}}],"totalFrames":21},"command":"stackTrace","request_seq":31,"success":true}
[8:47:53 AM] [DAP] [Info] ==> {"command":"source","arguments":{"sourceReference":24,"source":{"adapterData":{"type":"@Script","id":"libraries/@13069316/scripts/dart%3Aio-patch%2Fsocket_patch.dart/0","fixedId":true,"uri":"dart:io-patch/socket_patch.dart"},"name":"dart:io-patch/socket_patch.dart","origin":"from the SDK","path":"C:\\src\\flutter\\bin\\cache\\pkg\\sky_engine\\lib\\_internal\\vm\\bin\\socket_patch.dart","sourceReference":24}},"type":"request","seq":32}
[8:47:53 AM] [DAP] [Info] <== {"seq":1296,"type":"response","body":{"content":"// Copyright (c) 2013, the Dart project authors.  Please see the AUTHORS file\n// for details. All rights reserved. Use of this source code is governed by a\n// BSD-style license that can be found in the LICENSE file.\n\npart of \"common_patch.dart\";\n\n@patch\nclass RawServerSocket {\n  @patch\n  static Future<RawServerSocket> bind(address, int port,\n      {int backlog = 0, bool v6Only = false, bool shared = false}) {\n    return _RawServerSocket.bind(address, port, backlog, v6Only, shared);\n  }\n}\n\n@patch\nclass RawSocket {\n  @patch\n  static Future<RawSocket> connect(dynamic host, int port,\n      {dynamic sourceAddress, int sourcePort = 0, Duration? timeout}) {\n    return _RawSocket.connect(host, port, sourceAddress, sourcePort, timeout);\n  }\n\n  @patch\n  static Future<ConnectionTask<RawSocket>> startConnect(dynamic host, int port,\n      {dynamic sourceAddress, int sourcePort = 0}) {\n    return _RawSocket.startConnect(host, port, sourceAddress, sourcePort);\n  }\n}\n\n@patch\nclass RawSocketOption {\n  static final List<int?> _optionsCache =\n      List<int?>.filled(_RawSocketOptions.values.length, null);\n\n  @patch\n  static int _getOptionValue(int key) {\n    if (key > _RawSocketOptions.values.length) {\n      throw ArgumentError.value(key, 'key');\n    }\n    return _optionsCache[key] ??= _getNativeOptionValue(key);\n  }\n\n  @pragma(\"vm:external-name\", \"RawSocketOption_GetOptionValue\")\n  external static int _getNativeOptionValue(int key);\n}\n\n@patch\nclass InternetAddress {\n  @patch\n  static InternetAddress get loopbackIPv4 {\n    return _InternetAddress.loopbackIPv4;\n  }\n\n  @patch\n  static InternetAddress get loopbackIPv6 {\n    return _InternetAddress.loopbackIPv6;\n  }\n\n  @patch\n  static InternetAddress get anyIPv4 {\n    return _InternetAddress.anyIPv4;\n  }\n\n  @patch\n  static InternetAddress get anyIPv6 {\n    return _InternetAddress.anyIPv6;\n  }\n\n  @patch\n  factory…
[8:47:54 AM] [DAP] [Info] ==> {"command":"stackTrace","arguments":{"threadId":4,"startFrame":1,"levels":19},"type":"request","seq":33}
[8:47:54 AM] [DAP] [Info] <== {"seq":1297,"type":"response","body":{"stackFrames":[{"column":0,"id":25,"line":0,"name":"<asynchronous gap>","presentationHint":"label"},{"canRestart":false,"column":29,"id":26,"line":633,"name":"_NativeSocket.staggeredLookup.<anonymous closure>.lookupAddresses","source":{"adapterData":{"type":"@Script","id":"libraries/@13069316/scripts/dart%3Aio-patch%2Fsocket_patch.dart/0","fixedId":true,"uri":"dart:io-patch/socket_patch.dart"},"name":"dart:io-patch/socket_patch.dart","origin":"from the SDK","path":"C:\\src\\flutter\\bin\\cache\\pkg\\sky_engine\\lib\\_internal\\vm\\bin\\socket_patch.dart","sourceReference":28}},{"column":0,"id":27,"line":0,"name":"<asynchronous gap>","presentationHint":"label"}],"totalFrames":4},"command":"stackTrace","request_seq":33,"success":true}
[8:47:54 AM] [DAP] [Info] <== {"seq":1298,"type":"event","body":{"category":"stdout","output":"D/BufferPoolAccessor2.0( 6661): evictor expired: 2, evicted: 0\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1299,"type":"event","body":{"category":"stdout","output":"I/DMCodecAdapterFactory( 6661): Creating an asynchronous MediaCodec adapter for track type video\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1300,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): allocate(c2.goldfish.h264.decoder)\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1301,"type":"event","body":{"category":"stdout","output":"I/CCodec  ( 6661): setting up 'default' as default (vendor) store\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1302,"type":"event","body":{"category":"stdout","output":"I/CCodec  ( 6661): Created component [c2.goldfish.h264.decoder]\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1303,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): read media type: video/avc\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1304,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: algo.buffers.max-count.values\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1305,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: output.subscribed-indices.values\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1306,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: input.buffers.allocator-ids.values\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1307,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: output.buffers.allocator-ids.values\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1308,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: algo.buffers.allocator-ids.values\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1309,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: output.buffers.pool-ids.values\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1310,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: algo.buffers.pool-ids.values\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1311,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): ignored struct field coded.color-format.locations\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1312,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): ignoring local param raw.size (0xd2001800) as it is already supported\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1313,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): ignoring local param default.color (0x5200180b) as it is already supported\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1314,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): ignored struct field raw.hdr-static-info.mastering\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1315,"type":"event","body":{"category":"stdout","output":"I/CCodecConfig( 6661): query failed after returning 12 values (BAD_INDEX)\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1316,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): c2 config diff is Dict {\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1317,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.pl.level = 20496\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1318,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.pl.profile = 20481\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1319,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.vui.color.matrix = 0\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1320,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.vui.color.primaries = 0\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1321,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.vui.color.range = 2\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1322,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.vui.color.transfer = 0\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1323,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 default.color.matrix = 0\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1324,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 default.color.primaries = 0\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1325,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 default.color.range = 0\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1326,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 default.color.transfer = 0\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1327,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 input.buffers.max-size.value = 6291456\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1328,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 input.delay.value = 0\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1329,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   string input.media-type.value = \"video/avc\"\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1330,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 output.delay.value = 8\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1331,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   string output.media-type.value = \"video/raw\"\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1332,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.color.matrix = 0\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1333,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.color.primaries = 0\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1334,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.color.range = 2\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1335,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.color.transfer = 0\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1336,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.max-size.height = 240\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1337,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.max-size.width = 320\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1338,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.pixel-format.value = 35\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1339,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::i32 raw.rotation.flip = 0\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1340,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::i32 raw.rotation.value = 0\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1341,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.sar.height = 1\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1342,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.sar.width = 1\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1343,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.size.height = 240\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1344,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.size.width = 320\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1345,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2:\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1346,"type":"event","body":{"category":"stdout","output":"W/ColorUtils( 6661): expected specified color aspects (2:0:0:0)\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1347,"type":"event","body":{"category":"stdout","output":"I/MediaCodec( 6661): MediaCodec will operate in async mode\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1348,"type":"event","body":{"category":"stdout","output":"D/MediaCodec( 6661): flushMediametrics\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1349,"type":"event","body":{"category":"stdout","output":"D/SurfaceUtils( 6661): connecting to surface 0x735d423bc6c0, reason connectToSurface\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1350,"type":"event","body":{"category":"stdout","output":"I/MediaCodec( 6661): [c2.goldfish.h264.decoder] setting surface generation to 6820871\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1351,"type":"event","body":{"category":"stdout","output":"D/SurfaceUtils( 6661): disconnecting from surface 0x735d423bc6c0, reason connectToSurface(reconnect)\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1352,"type":"event","body":{"category":"stdout","output":"D/SurfaceUtils( 6661): connecting to surface 0x735d423bc6c0, reason connectToSurface(reconnect)\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1353,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): [c2.goldfish.h264.decoder] buffers are bound to CCodec for this session\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1354,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): no c2 equivalents for csd-1\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1355,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): no c2 equivalents for log-session-id\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1356,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): no c2 equivalents for native-window\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1357,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): no c2 equivalents for flags\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1358,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): config failed => CORRUPTED\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1359,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): c2 config diff is   c2::u32 raw.max-size.height = 720\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1360,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.max-size.width = 1280\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1361,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.size.height = 720\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1362,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.size.width = 1280\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1363,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 1107298332.\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1364,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): client requested max input size 219813, which is smaller than what component recommended (6291456); overriding with component recommendation.\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1365,"type":"event","body":{"category":"stdout","output":"W/CCodec  ( 6661): This behavior is subject to change. It is recommended that app developers double check whether the requested max input size is in reasonable range.\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1366,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): encoding statistics level = 0\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1367,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): setup formats input: AMessage(what = 0x00000000) = {\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1368,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t height = 720\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1369,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t level = 65536\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1370,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t max-input-size = 6291456\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1371,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   string mime = \"video/avc\"\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1372,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t profile = 65536\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1373,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t width = 1280\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1374,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   Rect crop(0, 0, 1279, 719)\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1375,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): }\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1376,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): setup formats output: AMessage(what = 0x00000000) = {\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1377,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t android._color-format = 2135033992\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1378,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t android._video-scaling = 1\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1379,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t rotation-degrees = 0\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1380,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t color-standard = 1\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1381,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t color-range = 2\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1382,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t color-transfer = 3\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1383,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t sar-height = 1\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1384,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t sar-width = 1\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1385,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   Rect crop(0, 0, 1279, 719)\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1386,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t width = 1280\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1387,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t height = 720\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1388,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t max-height = 720\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1389,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t max-width = 1280\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1390,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   string mime = \"video/raw\"\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1391,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t android._dataspace = 260\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1392,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t color-format = 2130708361\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1393,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): }\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1394,"type":"event","body":{"category":"stdout","output":"I/CCodecConfig( 6661): query failed after returning 12 values (BAD_INDEX)\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1395,"type":"event","body":{"category":"stdout","output":"D/MediaCodec( 6661): keep callback message for reclaim\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1396,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 1342179345.\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1397,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 2415921170.\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1398,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 1610614798.\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1399,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 2684356609.\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1400,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.goldfish.h264.decoder#665] Created input block pool with allocatorID 16 => poolID 23 - OK (0)\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1401,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.goldfish.h264.decoder#665] Query output surface allocator returned 0 params => BAD_INDEX (6)\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1402,"type":"event","body":{"category":"stdout","output":"I/CCodecBufferChannel( 6661): [c2.goldfish.h264.decoder#665] Created output block pool with allocatorID 18 => poolID 20 - OK\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1403,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.goldfish.h264.decoder#665] Configured output block pool ids 20 => OK\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1404,"type":"event","body":{"category":"stdout","output":"D/Codec2-OutputBufferQueue( 6661): remote graphic buffer migration 0/0\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1405,"type":"event","body":{"category":"stdout","output":"D/Codec2Client( 6661): setOutputSurface -- failed to set consumer usage (6/BAD_INDEX)\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1406,"type":"event","body":{"category":"stdout","output":"D/Codec2Client( 6661): setOutputSurface -- generation=6820871 consumer usage=0x900\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1407,"type":"event","body":{"category":"stdout","output":"D/Codec2Client( 6661): Surface configure completed\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1408,"type":"event","body":{"category":"stdout","output":"D/BufferPoolAccessor2.0( 6661): Destruction - bufferpool2 0x735d623d0218 cached: 0/0M, 0/0% in use; allocs: 27, 81% recycled; transfers: 27, 81% unfetched\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1409,"type":"event","body":{"category":"stdout","output":"I/DMCodecAdapterFactory( 6661): Creating an asynchronous MediaCodec adapter for track type audio\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1410,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): allocate(c2.android.aac.decoder)\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1411,"type":"event","body":{"category":"stdout","output":"I/CCodec  ( 6661): setting up 'default' as default (vendor) store\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1412,"type":"event","body":{"category":"stdout","output":"I/CCodec  ( 6661): Created component [c2.android.aac.decoder]\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1413,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): read media type: audio/mp4a-latm\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1414,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: algo.buffers.max-count.values\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1415,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: output.subscribed-indices.values\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1416,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: input.buffers.allocator-ids.values\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1417,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: output.buffers.allocator-ids.values\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1418,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: algo.buffers.allocator-ids.values\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1419,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: output.buffers.pool-ids.values\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1420,"type":"event","body":{"category":"stdout","output":"D/ReflectedParamUpdater( 6661): extent() != 1 for single value type: algo.buffers.pool-ids.values\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1421,"type":"event","body":{"category":"stdout","output":"I/CCodecConfig( 6661): query failed after returning 20 values (BAD_INDEX)\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1422,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): c2 config diff is Dict {\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1423,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.aac-packaging.value = 0\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1424,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.bitrate.value = 64000\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1425,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.pl.level = 0\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1426,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 coded.pl.profile = 8192\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1427,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::i32 coding.drc.album-mode.value = 0\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1428,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::float coding.drc.attenuation-factor.value = 1\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1429,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::float coding.drc.boost-factor.value = 1\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1430,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::i32 coding.drc.compression-mode.value = 3\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1431,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::i32 coding.drc.effect-type.value = 3\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1432,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::float coding.drc.encoded-level.value = 0.25\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1433,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::float coding.drc.reference-level.value = -16\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1434,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 input.buffers.max-size.value = 8192\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1435,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 input.delay.value = 0\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1436,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   string input.media-type.value = \"audio/mp4a-latm\"\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1437,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 output.delay.value = 2\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1438,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::float output.drc.output-loudness.value = 0.25\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1439,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   string output.media-type.value = \"audio/raw\"\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1440,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.channel-count.value = 1\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1441,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.channel-mask.value = 0\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1442,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.max-channel-count.value = 8\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1443,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.sample-rate.value = 44100\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1444,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): }\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1445,"type":"event","body":{"category":"stdout","output":"I/MediaCodec( 6661): MediaCodec will operate in async mode\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1446,"type":"event","body":{"category":"stdout","output":"D/MediaCodec( 6661): flushMediametrics\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1447,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): [c2.android.aac.decoder] buffers are bound to CCodec for this session\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1448,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): no c2 equivalents for log-session-id\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1449,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): no c2 equivalents for flags\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1450,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): config failed => CORRUPTED\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1451,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): c2 config diff is   c2::u32 raw.channel-count.value = 2\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1452,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 1107298332.\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1453,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): client requested max input size 623, which is smaller than what component recommended (8192); overriding with component recommendation.\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1454,"type":"event","body":{"category":"stdout","output":"W/CCodec  ( 6661): This behavior is subject to change. It is recommended that app developers double check whether the requested max input size is in reasonable range.\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1455,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): encoding statistics level = 0\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1456,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): setup formats input: AMessage(what = 0x00000000) = {\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1457,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-drc-album-mode = 0\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1458,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-drc-boost-level = 127\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1459,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-drc-cut-level = 127\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1460,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-drc-effect-type = 3\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1461,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-encoded-target-level = -1\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1462,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-max-output-channel_count = 8\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1463,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-target-ref-level = 64\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1464,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t bitrate = 64000\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1465,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t channel-count = 2\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1466,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t channel-mask = 0\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1467,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t level = 0\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1468,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t max-input-size = 8192\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1469,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t max-output-channel-count = 8\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1470,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   string mime = \"audio/mp4a-latm\"\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1471,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t profile = 2\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1472,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t sample-rate = 44100\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1473,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): }\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1474,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): setup formats output: AMessage(what = 0x00000000) = {\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1475,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-drc-album-mode = 0\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1476,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-drc-boost-level = 127\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1477,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-drc-cut-level = 127\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1478,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-drc-effect-type = 3\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1479,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-drc-output-loudness = -1\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1480,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-encoded-target-level = -1\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1481,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-max-output-channel_count = 8\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1482,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t aac-target-ref-level = 64\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1483,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t channel-count = 2\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1484,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t channel-mask = 0\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1485,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t max-output-channel-count = 8\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1486,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   string mime = \"audio/raw\"\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1487,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t sample-rate = 44100\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1488,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661):   int32_t android._config-pcm-encoding = 2\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1489,"type":"event","body":{"category":"stdout","output":"D/CCodec  ( 6661): }\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1490,"type":"event","body":{"category":"stdout","output":"I/CCodecConfig( 6661): query failed after returning 20 values (BAD_INDEX)\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1491,"type":"event","body":{"category":"stdout","output":"D/MediaCodec( 6661): keep callback message for reclaim\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1492,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 1342179345.\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1493,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 2415921170.\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1494,"type":"event","body":{"category":"stdout","output":"W/Codec2Client( 6661): query -- param skipped: index = 1610614798.\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1495,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.android.aac.decoder#443] Created input block pool with allocatorID 16 => poolID 24 - OK (0)\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1496,"type":"event","body":{"category":"stdout","output":"D/BufferPoolAccessor2.0( 6661): Destruction - bufferpool2 0x735d623bb9b8 cached: 0/0M, 0/0% in use; allocs: 32, 84% recycled; transfers: 27, 81% unfetched\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1497,"type":"event","body":{"category":"stdout","output":"I/CCodecBufferChannel( 6661): [c2.android.aac.decoder#443] Created output block pool with allocatorID 16 => poolID 30 - OK\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1498,"type":"event","body":{"category":"stdout","output":"D/CCodecBufferChannel( 6661): [c2.android.aac.decoder#443] Configured output block pool ids 30 => OK\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1499,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): c2 config diff is   c2::u32 raw.channel-mask.value = 12\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1500,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661): [c2.android.aac.decoder#443:Output[N]] popFromStashAndRegister: at 1000000000000us, output format changed to AMessage(what = 0x00000000) = {\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1501,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t aac-drc-album-mode = 0\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1502,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t aac-drc-boost-level = 127\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1503,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t aac-drc-cut-level = 127\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1504,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t aac-drc-effect-type = 3\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1505,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t aac-drc-output-loudness = -1\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1506,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t aac-encoded-target-level = -1\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1507,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t aac-max-output-channel_count = 8\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1508,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t aac-target-ref-level = 64\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1509,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t channel-count = 2\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1510,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t channel-mask = 12\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1511,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t max-output-channel-count = 8\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1512,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   string mime = \"audio/raw\"\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1513,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t sample-rate = 44100\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1514,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661):   int32_t android._config-pcm-encoding = 2\n"},"event":"output"}
[8:47:55 AM] [DAP] [Info] <== {"seq":1515,"type":"event","body":{"category":"stdout","output":"D/CCodecBuffers( 6661): }\n"},"event":"output"}
[8:47:56 AM] [DAP] [Info] <== {"seq":1516,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661): c2 config diff is   c2::u32 raw.color.matrix = 1\n"},"event":"output"}
[8:47:56 AM] [DAP] [Info] <== {"seq":1517,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.color.primaries = 1\n"},"event":"output"}
[8:47:56 AM] [DAP] [Info] <== {"seq":1518,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.color.transfer = 3\n"},"event":"output"}
[8:47:56 AM] [DAP] [Info] <== {"seq":1519,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.crop.height = 720\n"},"event":"output"}
[8:47:56 AM] [DAP] [Info] <== {"seq":1520,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.crop.left = 0\n"},"event":"output"}
[8:47:56 AM] [DAP] [Info] <== {"seq":1521,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.crop.top = 0\n"},"event":"output"}
[8:47:56 AM] [DAP] [Info] <== {"seq":1522,"type":"event","body":{"category":"stdout","output":"D/CCodecConfig( 6661):   c2::u32 raw.crop.width = 1280\n"},"event":"output"}
[8:47:58 AM] [DAP] [Info] <== {"seq":1523,"type":"event","body":{"category":"stdout","output":"D/BufferPoolAccessor2.0( 6661): bufferpool2 0x735d623a3e78 : 0(0 size) total buffers - 0(0 size) used buffers - 27/32 (recycle/alloc) - 5/27 (fetch/transfer)\n"},"event":"output"}
[8:47:58 AM] [DAP] [Info] <== {"seq":1524,"type":"event","body":{"category":"stdout","output":"D/BufferPoolAccessor2.0( 6661): bufferpool2 0x735d623bd0d8 : 0(0 size) total buffers - 0(0 size) used buffers - 22/27 (recycle/alloc) - 5/27 (fetch/transfer)\n"},"event":"output"}
[8:47:58 AM] [DAP] [Info] <== {"seq":1525,"type":"event","body":{"category":"stdout","output":"D/BufferPoolAccessor2.0( 6661): evictor expired: 2, evicted: 2\n"},"event":"output"}
[8:48:00 AM] [DAP] [Info] <== {"seq":1526,"type":"event","body":{"category":"stdout","output":"D/BufferPoolAccessor2.0( 6661): evictor expired: 1, evicted: 0\n"},"event":"output"}
[8:48:01 AM] [DAP] [Info] <== {"seq":1527,"type":"event","body":{"category":"stdout","output":"D/BufferPoolAccessor2.0( 6661): bufferpool2 0x735d623b7208 : 5(31457280 size) total buffers - 4(25165824 size) used buffers - 18/23 (recycle/alloc) - 5/23 (fetch/transfer)\n"},"event":"output"}
[8:48:01 AM] [DAP] [Info] <== {"seq":1528,"type":"event","body":{"category":"stdout","output":"D/BufferPoolAccessor2.0( 6661): bufferpool2 0x735d623d1248 : 5(40960 size) total buffers - 0(0 size) used buffers - 22/27 (recycle/alloc) - 5/27 (fetch/transfer)\n"},"event":"output"}
[8:48:01 AM] [DAP] [Info] <== {"seq":1529,"type":"event","body":{"category":"stdout","output":"D/BufferPoolAccessor2.0( 6661): evictor expired: 3, evicted: 2\n"},"event":"output"}
